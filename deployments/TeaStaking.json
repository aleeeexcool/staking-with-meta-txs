{
  "address": "0xFdC4Af2676692C1589F0573D3B817111Fc9f0332",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_teaVesting",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_teaToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "presaleTokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressesMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimCooldownNotPassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLengths",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proofCalculation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contractCalculation",
          "type": "uint256"
        }
      ],
      "name": "InvalidCalculationReward",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "InvalidId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "LockedPeriodNotPassed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "NeedToUnstakeFirst",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughLockedTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "NothingToUnstake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyValidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingFinished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingNotStarted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserAlreadyStakedWithThisToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongDecimalNumber",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "starDate",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocationPerSecond",
          "type": "uint256"
        }
      ],
      "name": "StakingInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStakedTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatedShareReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakedTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCUMULATED_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VIP_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocationPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "checkTokenValidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTotalUserStakedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "structHash",
          "type": "bytes32"
        }
      ],
      "name": "hashTypedDataV4",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTotalAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRewardDistributionStartTime",
          "type": "uint256"
        }
      ],
      "name": "initializeStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "operatorUserNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IStruct.OffChainStruct[]",
          "name": "offChainData",
          "type": "tuple[]"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "vip",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakedTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimCooldown",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingRun",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teaToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teaVesting",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedTea",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "rewardsWithLoyalty",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IStruct.UnstakeParam",
          "name": "unstakeParams",
          "type": "tuple"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRewardPerShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f4cfbcf7491b697d91103284f2e5a206288e95ae1b59251326862cfb0e8b337",
  "receipt": {
    "to": null,
    "from": "0xdcd85DED75e992164C8fF0666c5a46a0944A6b2F",
    "contractAddress": "0xFdC4Af2676692C1589F0573D3B817111Fc9f0332",
    "transactionIndex": 64,
    "gasUsed": "2890591",
    "logsBloom": "0x
    "blockHash": "0x0eea55d99e00ed8c3154813043420e47b1e244ac0daa00dd6973b3847e935120",
    "transactionHash": "0x4f4cfbcf7491b697d91103284f2e5a206288e95ae1b59251326862cfb0e8b337",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 62534481,
        "transactionHash": "0x4f4cfbcf7491b697d91103284f2e5a206288e95ae1b59251326862cfb0e8b337",
        "address": "0xFdC4Af2676692C1589F0573D3B817111Fc9f0332",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x20296b01d0b6bd176f0c1e29644934c0047abf080dae43609a1bbc09e39bafdb",
          "0x000000000000000000000000d1aebb1b04c242e3a5404a1bc5f8854b711d54a7",
          "0x000000000000000000000000dcd85ded75e992164c8ff0666c5a46a0944a6b2f"
        ],
        "data": "0x",
        "logIndex": 327,
        "blockHash": "0x0eea55d99e00ed8c3154813043420e47b1e244ac0daa00dd6973b3847e935120"
      },
      {
        "transactionIndex": 64,
        "blockNumber": 62534481,
        "transactionHash": "0x4f4cfbcf7491b697d91103284f2e5a206288e95ae1b59251326862cfb0e8b337",
        "address": "0xFdC4Af2676692C1589F0573D3B817111Fc9f0332",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcd85ded75e992164c8ff0666c5a46a0944a6b2f",
          "0x000000000000000000000000dcd85ded75e992164c8ff0666c5a46a0944a6b2f"
        ],
        "data": "0x",
        "logIndex": 328,
        "blockHash": "0x0eea55d99e00ed8c3154813043420e47b1e244ac0daa00dd6973b3847e935120"
      },
      {
        "transactionIndex": 64,
        "blockNumber": 62534481,
        "transactionHash": "0x4f4cfbcf7491b697d91103284f2e5a206288e95ae1b59251326862cfb0e8b337",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000dcd85ded75e992164c8ff0666c5a46a0944a6b2f",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000152e43f611963e30000000000000000000000000000000000000000000000011075ce014c65608900000000000000000000000000000000000000000000024d48adfd2ec3b729d40000000000000000000000000000000000000000000000010f22e9c1eb4bfca600000000000000000000000000000000000000000000024d4a00e16e24d08db7",
        "logIndex": 329,
        "blockHash": "0x0eea55d99e00ed8c3154813043420e47b1e244ac0daa00dd6973b3847e935120"
      }
    ],
    "blockNumber": 62534481,
    "cumulativeGasUsed": "13600255",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdcd85DED75e992164C8fF0666c5a46a0944A6b2F",
    "0xD9dA072FC2441985e3D19A5A1628E121505833D9",
    [
      "0xd1AeBb1b04C242e3A5404A1Bc5F8854B711D54a7"
    ],
    "0x9ae49dD651e2ae88B8d4bD06cf3861dD39ee67C5",
    "0x9ae49dD651e2ae88B8d4bD06cf3861dD39ee67C5",
    "0x880F5e24C66BefbD8b038Fc4A66bAf35f30f0ABE",
    [
      "0xc2ab1d5240f49DB75B2ce6C1205B567791416cA1",
      "0x244bfbe555E6e415451005901dB7cAB90A71B359",
      "0x42B0C6f18BFa65b0d47cf1D9a2b65538b6417b14"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "cda819f76112ec31a3cfd9a5d0765bf9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teaVesting\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teaToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"presaleTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressesMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimCooldownNotPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proofCalculation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractCalculation\",\"type\":\"uint256\"}],\"name\":\"InvalidCalculationReward\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"InvalidId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LockedPeriodNotPassed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NeedToUnstakeFirst\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughLockedTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NothingToUnstake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyValidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingFinished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingNotStarted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyStakedWithThisToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongDecimalNumber\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"starDate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocationPerSecond\",\"type\":\"uint256\"}],\"name\":\"StakingInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatedShareReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCUMULATED_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VIP_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkTokenValidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalUserStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"structHash\",\"type\":\"bytes32\"}],\"name\":\"hashTypedDataV4\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotalAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardDistributionStartTime\",\"type\":\"uint256\"}],\"name\":\"initializeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"operatorUserNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IStruct.OffChainStruct[]\",\"name\":\"offChainData\",\"type\":\"tuple[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vip\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRun\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teaToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teaVesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTea\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardsWithLoyalty\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IStruct.UnstakeParam\",\"name\":\"unstakeParams\",\"type\":\"tuple\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardPerShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidCalculationReward(uint256,uint256)\":[{\"params\":{\"contractCalculation\":\"The reward calculated by the contract\",\"proofCalculation\":\"The reward calculated via proof\"}}],\"InvalidId(uint256)\":[{\"params\":{\"id\":\"The invalid stake ID\"}}],\"LockedPeriodNotPassed(uint256)\":[{\"params\":{\"id\":\"The ID of the stake with the locked period still active\"}}],\"NeedToUnstakeFirst(uint256)\":[{\"params\":{\"id\":\"The ID of the stake requiring unstaking\"}}],\"NothingToUnstake(uint256)\":[{\"params\":{\"id\":\"The ID of the stake that cannot be unstaked\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Staked(address,uint256,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens staked\",\"id\":\"The ID of the stake\",\"staker\":\"The address of the user staking the tokens\",\"token\":\"The address of the token being staked\"}},\"StakingInitialized(uint256,uint256,uint256,uint256)\":{\"params\":{\"allocationPerSecond\":\"The amount of tokens allocated per second\",\"endDate\":\"The end date of the staking\",\"starDate\":\"The start date of the staking\",\"totalAllocation\":\"The total amount of tokens allocated\"}},\"Unstaked(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens unstaked\",\"id\":\"The ID of the stake being unstaked\",\"staker\":\"The address of the user unstaking tokens\"}},\"UpdatedShareReward(uint256,uint256,uint256)\":{\"params\":{\"rewardPerShare\":\"The updated reward per share value\",\"timestamp\":\"The time at which the reward per share was updated\",\"totalStakedTokens\":\"The total number of staked tokens at the time of the update\"}},\"Withdrawal(address,address,uint256,uint256)\":{\"params\":{\"reward\":\"The reward earned by the user\",\"stakedTokens\":\"The amount of staked tokens being withdrawn\",\"staker\":\"The address of the user withdrawing tokens\",\"token\":\"The address of the token being withdrawn\"}}},\"kind\":\"dev\",\"methods\":{\"checkTokenValidity(address)\":{\"details\":\"Internal function to check if token address is valid\",\"params\":{\"token\":\"The token of user's stake\"}},\"constructor\":{\"params\":{\"_teaToken\":\"The address of the token\",\"_teaVesting\":\"The address of the vesting contract\",\"_treasury\":\"The address of the treasury\",\"admin\":\"The address of the admin\",\"operators\":\"The list of operators\",\"presaleTokens\":\"The list of presale tokens\",\"trustedForwarder\":\"The address of the trusted forwarder\"}},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTotalUserStakedTokens(address)\":{\"details\":\"This function calculates and returns the cumulative total of all tokens staked by the user across different stakes\",\"params\":{\"user\":\"The address of the user whose total staked tokens are being queried\"},\"returns\":{\"totalAmount\":\"The total amount of tokens the user has staked\"}},\"getUserIds(address)\":{\"params\":{\"user\":\"The address of the user whose stake IDs are being queried\"},\"returns\":{\"_0\":\"An array of uint256 representing the stake IDs that belong to the user\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initializeStaking(uint256,uint256)\":{\"params\":{\"newRewardDistributionStartTime\":\"The start time of the reward distribution\",\"newTotalAllocation\":\"The total amount of allocation to be distributed\"}},\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"stake(address[],uint256[],(address,address,address,uint256,uint8,bytes32,bytes32)[])\":{\"details\":\"This function handles the staking process for multiple tokens at once, validating inputs and processing off-chain data\",\"params\":{\"amounts\":\"An array of amounts, corresponding to the number of tokens the user is staking for each token in `tokens`\",\"offChainData\":\"An OffChainStruct containing additional off-chain data related to the staking process\",\"tokens\":\"An array of addresses representing the tokens that the user wishes to stake\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"},\"unstake((address,address,uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32))\":{\"details\":\"This function processes the unstaking request and adjusts the user's stake accordingly\",\"params\":{\"unstakeParams\":\"A struct containing the parameters for the unstaking process, such as the token, amount, and other necessary details\"}},\"updateRewardPerShare()\":{\"details\":\"This function recalculates and updates the reward per share value, which affects the rewards distribution for all users\"},\"withdraw(uint256[])\":{\"details\":\"This function handles the withdrawal of tokens and rewards while ensuring non-reentrant security\",\"params\":{\"ids\":\"An array of stake IDs representing the specific stakes the user wishes to withdraw\"}}},\"title\":\"TeaStaking\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressesMismatch()\":[{\"notice\":\"Error indicating that the provided addresses do not match the addresses from off-chain data\"}],\"ClaimCooldownNotPassed()\":[{\"notice\":\"Error indicating that the claim cooldown period has not passed\"}],\"InvalidArrayLengths()\":[{\"notice\":\"Error indicating that the provided array lengths are invalid\"}],\"InvalidCalculationReward(uint256,uint256)\":[{\"notice\":\"Error indicating a mismatch in reward calculations between proof and contract\"}],\"InvalidId(uint256)\":[{\"notice\":\"Error indicating that the provided stake ID is invalid\"}],\"LockedPeriodNotPassed(uint256)\":[{\"notice\":\"Error indicating that the locked period has not passed for the given stake ID\"}],\"NeedToUnstakeFirst(uint256)\":[{\"notice\":\"Error indicating the user needs to unstake the tokens first before performing another action\"}],\"NoZeroAddress()\":[{\"notice\":\"Error indicating that the provided address is the zero address\"}],\"NoZeroAmount()\":[{\"notice\":\"Error indicating that the amount of tokens to stake cannot be zero\"}],\"NotEnoughLockedTokens()\":[{\"notice\":\"Error indicating that the user does not have enough locked tokens to perform an action\"}],\"NothingToUnstake(uint256)\":[{\"notice\":\"Error indicating there is nothing to unstake for the given stake ID\"}],\"OnlyValidToken()\":[{\"notice\":\"Error indicating that only valid tokens are accepted for staking\"}],\"StakingAlreadyInitialized()\":[{\"notice\":\"Error indicating that staking has already been initialized\"}],\"StakingFinished()\":[{\"notice\":\"Error indicating that staking has already finished\"}],\"StakingNotStarted()\":[{\"notice\":\"Error indicating that staking has not yet started\"}],\"UserAlreadyStakedWithThisToken()\":[{\"notice\":\"Error indicating that the user has already staked tokens with the specified token\"}],\"WrongDecimalNumber()\":[{\"notice\":\"Error indicating that the provided decimal number is invalid\"}]},\"events\":{\"Staked(address,uint256,address,uint256)\":{\"notice\":\"Emitted when a user stakes tokens\"},\"StakingInitialized(uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when the staking contract is initialized\"},\"Unstaked(address,uint256,uint256)\":{\"notice\":\"Emitted when a user unstakes tokens\"},\"UpdatedShareReward(uint256,uint256,uint256)\":{\"notice\":\"Emitted when the reward per share is updated\"},\"Withdrawal(address,address,uint256,uint256)\":{\"notice\":\"Emitted when a user withdraws staked tokens along with rewards\"}},\"kind\":\"user\",\"methods\":{\"ACCUMULATED_PRECISION()\":{\"notice\":\"The precision of the accumulated rewards\"},\"ONE_YEAR()\":{\"notice\":\"1 year in days\"},\"VIP_AMOUNT()\":{\"notice\":\"The amount of VIP tokens, 1 million\"},\"allocationPerSecond()\":{\"notice\":\"The amount of allocation per second\"},\"constructor\":{\"notice\":\"Constructor of the contract\"},\"counter()\":{\"notice\":\"The counter for stake IDs\"},\"emergencyWithdraw()\":{\"notice\":\"Allows the admin to withdraw all allocation from contract\"},\"endDate()\":{\"notice\":\"The end date of the staking\"},\"getTotalUserStakedTokens(address)\":{\"notice\":\"Returns the total amount of tokens staked by a specific user\"},\"getUserIds(address)\":{\"notice\":\"Returns an array of stake IDs associated with a specific user\"},\"initializeStaking(uint256,uint256)\":{\"notice\":\"Allows the admin to initialize the staking\"},\"lastRewardBlockNumber()\":{\"notice\":\"The block number of the last reward\"},\"lastUpdatedTimestamp()\":{\"notice\":\"The timestamp of the last reward\"},\"rewardPerShare()\":{\"notice\":\"The amount of rewards per share\"},\"stake(address[],uint256[],(address,address,address,uint256,uint8,bytes32,bytes32)[])\":{\"notice\":\"Allows a user to stake multiple tokens with specified amounts\"},\"stakes(uint256)\":{\"notice\":\"The mapping of each stake\"},\"stakingRun()\":{\"notice\":\"The state of the staking\"},\"startDate()\":{\"notice\":\"The start date of the staking\"},\"teaToken()\":{\"notice\":\"The address of the Tea token\"},\"teaVesting()\":{\"notice\":\"The address of the Tea vesting contract\"},\"totalAllocation()\":{\"notice\":\"The amount of total allocation\"},\"totalStakedTea()\":{\"notice\":\"The amount of total staked Tea\"},\"totalStakedTokens()\":{\"notice\":\"The amount of total staked tokens\"},\"treasury()\":{\"notice\":\"The address of the treasury\"},\"unstake((address,address,uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Allows a user to unstake their staked tokens based on specified parameters\"},\"updateRewardPerShare()\":{\"notice\":\"Updates the reward per share for all staked tokens in the contract\"},\"withdraw(uint256[])\":{\"notice\":\"Allows a user to withdraw their staked tokens and rewards for multiple stake IDs\"}},\"notice\":\"The contract which allowing users to stake Tea and presale tokens, earn allocationrewards, and manage theirs stakes\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TeaStaking.sol\":\"TeaStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n *\\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC2771\\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\\n * function only accessible if `msg.data.length == 0`.\\n *\\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\\n * recovery.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /**\\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\\n     * invoke functions on this contract on behalf of other accounts.\\n     *\\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder_) {\\n        _trustedForwarder = trustedForwarder_;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the trusted forwarder.\\n     */\\n    function trustedForwarder() public view virtual returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any particular address is the trusted forwarder.\\n     */\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == trustedForwarder();\\n    }\\n\\n    /**\\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgSender() internal view virtual override returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /**\\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return msg.data[:calldataLength - contextSuffixLength];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\\n        return 20;\\n    }\\n}\\n\",\"keccak256\":\"0x98256cf37b71a69b2f5a8a6fe975ea03590dff703102bd141a830f94e8adebf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/SignatureHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport {IStruct} from \\\"./interfaces/IStruct.sol\\\";\\n\\nabstract contract SignatureHandler is EIP712, AccessControl, IStruct {\\n    /// @dev Mapping to track signature nonces, operator's address => caller's address => signature nonce\\n    mapping(address operator => mapping(address caller => uint256 nonce)) public operatorUserNonces;\\n    /// @dev keccak256(\\\"unstake(UnstakeParam calldata _params)\\\")\\n    bytes32 public constant UNSTAKE_TYPEHASH = 0xb89cb22cf091ea736d7376247904b200f2ad707ec01c556961bab09586165a4a;\\n    /// @dev keccak256(\\\"OPERATOR_ROLE\\\")\\n    bytes32 public constant OPERATOR_ROLE = 0x20296b01d0b6bd176f0c1e29644934c0047abf080dae43609a1bbc09e39bafdb;\\n\\n    constructor(address[] memory operators) EIP712(\\\"TeaStaking\\\", \\\"1.0\\\") {\\n        for (uint256 i = 0; i < operators.length; ++i) {\\n            if (operators[i] == address(0)) revert NoZeroAddress();\\n            _grantRole(OPERATOR_ROLE, operators[i]);\\n        }\\n    }\\n\\n    function _verifyUnstakeSignature(address from, UnstakeParam calldata unstakeParam)\\n        internal\\n        returns (bool result, string memory errorReason)\\n    {\\n        bytes memory encodedData = abi.encode(\\n            UNSTAKE_TYPEHASH,\\n            unstakeParam.user,\\n            unstakeParam.ids,\\n            unstakeParam.rewardsWithLoyalty,\\n            unstakeParam.nonce,\\n            unstakeParam.deadline\\n        );\\n        return _verifySignature(\\n            encodedData,\\n            from,\\n            unstakeParam.operator,\\n            unstakeParam.nonce,\\n            unstakeParam.deadline,\\n            unstakeParam.v,\\n            unstakeParam.r,\\n            unstakeParam.s\\n        );\\n    }\\n\\n    function _verifySignature(\\n        bytes memory encodedData,\\n        address from,\\n        address operator,\\n        uint256 nonce,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal returns (bool result, string memory errorReason) {\\n        if (!hasRole(OPERATOR_ROLE, operator)) {\\n            return (false, \\\"INVALID_OPERATOR\\\");\\n        }\\n        if (deadline < block.timestamp) {\\n            return (false, \\\"SIGNATURE_EXPIRED\\\");\\n        }\\n        if (nonce != operatorUserNonces[operator][from]++) {\\n            return (false, \\\"MISMATCHING_NONCES\\\");\\n        }\\n        bytes32 digest = _hashTypedDataV4(keccak256(encodedData));\\n        address recoveredAddress = ECDSA.recover(digest, v, r, s);\\n        if (recoveredAddress != operator) {\\n            return (false, \\\"INVALID_SIGNATURE\\\");\\n        }\\n        return (true, \\\"\\\");\\n    }\\n\\n    function hashTypedDataV4(bytes32 structHash) external view returns (bytes32) {\\n        return super._hashTypedDataV4(structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x3e3ce1c278b0b3385cfa39b4ba20e2a593c6734f872f01c525f4bba72d691741\",\"license\":\"MIT\"},\"contracts/TeaStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {ERC2771Context, Context} from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\n\\nimport {ITeaStaking} from \\\"./interfaces/ITeaStaking.sol\\\";\\nimport {ITeaVesting} from \\\"./interfaces/ITeaVesting.sol\\\";\\nimport {SignatureHandler} from \\\"./SignatureHandler.sol\\\";\\n\\n/// @title TeaStaking\\n/// @notice The contract which allowing users to stake Tea and presale tokens, earn allocationrewards, and manage theirs stakes\\ncontract TeaStaking is ITeaStaking, ReentrancyGuard, SignatureHandler, ERC2771Context {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice 1 year in days\\n    uint256 public constant ONE_YEAR = 365 days;\\n    /// @notice The amount of VIP tokens, 1 million\\n    uint256 public constant VIP_AMOUNT = 1_000_000;\\n    /// @notice The precision of the accumulated rewards\\n    uint256 public constant ACCUMULATED_PRECISION = 1e18;\\n\\n    /// @notice The amount of total staked tokens\\n    uint256 public totalStakedTokens;\\n    /// @notice The amount of total staked Tea\\n    uint256 public totalStakedTea;\\n    /// @notice The amount of total allocation\\n    uint256 public totalAllocation;\\n    /// @notice The amount of allocation per second\\n    uint256 public allocationPerSecond;\\n    /// @notice The amount of rewards per share\\n    uint256 public rewardPerShare;\\n\\n    /// @notice The block number of the last reward\\n    uint256 public lastRewardBlockNumber;\\n    /// @notice The timestamp of the last reward\\n    uint256 public lastUpdatedTimestamp;\\n    /// @notice The start date of the staking\\n    uint256 public startDate;\\n    /// @notice The end date of the staking\\n    uint256 public endDate;\\n\\n    /// @notice The counter for stake IDs\\n    uint256 public counter;\\n\\n    /// @notice The address of the treasury\\n    address public immutable treasury;\\n    /// @notice The address of the Tea vesting contract\\n    address public immutable teaVesting;\\n    /// @notice The address of the Tea token\\n    address public immutable teaToken;\\n\\n    /// @notice The state of the staking\\n    bool public stakingRun;\\n\\n    /// @notice The mapping of each stake\\n    mapping(uint256 id => Stake stake) public stakes;\\n    ///@notice The mapping of each presale token\\n    mapping(address token => bool valid) private validTokens;\\n    /// @notice The mapping of each users' stake IDs\\n    mapping(address user => uint256[] ids) private userIds;\\n\\n    // ------------------------------------------ Constructor -------------------------------------\\n\\n    /**\\n     * @notice Constructor of the contract\\n     * @param admin The address of the admin\\n     * @param _treasury The address of the treasury\\n     * @param operators The list of operators\\n     * @param trustedForwarder The address of the trusted forwarder\\n     * @param _teaVesting The address of the vesting contract\\n     * @param _teaToken The address of the token\\n     * 8 @param presaleTokens The list of presale tokens\\n     */\\n    constructor(\\n        address admin,\\n        address _treasury,\\n        address[] memory operators,\\n        address trustedForwarder,\\n        address _teaVesting,\\n        address _teaToken,\\n        address[] memory presaleTokens\\n    ) ERC2771Context(trustedForwarder) SignatureHandler(operators) {\\n        if (\\n            admin == address(0) || _treasury == address(0) || trustedForwarder == address(0)\\n                || _teaVesting == address(0) || _teaToken == address(0)\\n        ) {\\n            revert NoZeroAddress();\\n        }\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n        treasury = _treasury;\\n        teaVesting = _teaVesting;\\n\\n        teaToken = _teaToken;\\n        uint256 teaDecimal = IERC20Metadata(teaToken).decimals();\\n\\n        for (uint256 i = 0; i < presaleTokens.length; i++) {\\n            if (presaleTokens[i] == address(0)) {\\n                revert NoZeroAddress();\\n            }\\n            if (IERC20Metadata(presaleTokens[i]).decimals() != teaDecimal) {\\n                revert WrongDecimalNumber();\\n            }\\n            // if (ITeaVesting(teaVesting).getVestingTokens(presaleTokens[i]).dateEnd == 0) revert OnlyValidToken();\\n            validTokens[presaleTokens[i]] = true;\\n        }\\n    }\\n\\n    // ------------------------------------------ External Admin functions ------------------------\\n\\n    /// @notice Allows the admin to initialize the staking\\n    /// @param newTotalAllocation The total amount of allocation to be distributed\\n    /// @param newRewardDistributionStartTime The start time of the reward distribution\\n    function initializeStaking(uint256 newTotalAllocation, uint256 newRewardDistributionStartTime) external {\\n        _checkRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        if (!stakingRun) {\\n            totalAllocation = newTotalAllocation;\\n            allocationPerSecond = newTotalAllocation / ONE_YEAR;\\n            lastUpdatedTimestamp = newRewardDistributionStartTime;\\n            startDate = newRewardDistributionStartTime;\\n            endDate = newRewardDistributionStartTime + ONE_YEAR;\\n            stakingRun = true;\\n\\n            IERC20(teaToken).safeTransferFrom(treasury, address(this), totalAllocation);\\n\\n            emit StakingInitialized(startDate, endDate, totalAllocation, allocationPerSecond);\\n        } else {\\n            revert StakingAlreadyInitialized();\\n        }\\n    }\\n\\n    /// @notice Allows the admin to withdraw all allocation from contract\\n    function emergencyWithdraw() external {\\n        _checkRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        IERC20(teaToken).safeTransfer(msg.sender, IERC20(teaToken).balanceOf(address(this)) - totalStakedTea);\\n    }\\n\\n    // ------------------------------------------ External functions ------------------------------\\n\\n    /// @inheritdoc ITeaStaking\\n    function stake(address[] calldata tokens, uint256[] calldata amounts, OffChainStruct[] calldata offChainData)\\n        external\\n    {\\n        checkStakingStatus();\\n        if (tokens.length != amounts.length) revert InvalidArrayLengths();\\n        address user = _msgSender();\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address _token = tokens[i];\\n            uint256 _amount = amounts[i];\\n\\n            if (_amount == 0) revert NoZeroAmount();\\n            if (!checkTokenValidity(_token)) revert OnlyValidToken();\\n            if (_token != offChainData[i].token || address(this) != offChainData[i].to) revert AddressesMismatch();\\n\\n            if (_token == teaToken) {\\n                IERC20(teaToken).safeTransferFrom(user, address(this), _amount);\\n\\n                totalStakedTea += _amount;\\n            } else {\\n                if (\\n                    ITeaVesting(teaVesting).getVestingUsers(user, _token).tokensForVesting\\n                        - ITeaVesting(teaVesting).getVestingUsers(user, _token).totalVestingClaimed < _amount\\n                ) {\\n                    revert NotEnoughLockedTokens();\\n                }\\n                ITeaVesting(teaVesting).transferOwnerOffChain(offChainData[i]);\\n            }\\n\\n            updateRewardPerShare();\\n\\n            bool _vip = false;\\n            uint256 _lockedPeriod = 0;\\n            if (_amount >= VIP_AMOUNT * 10 ** IERC20Metadata(_token).decimals()) {\\n                _vip = true;\\n                _lockedPeriod = block.timestamp + ONE_YEAR;\\n            }\\n\\n            uint256 newId = ++counter;\\n            stakes[newId] = (\\n                Stake({\\n                    vip: _vip,\\n                    token: _token,\\n                    stakedTokens: _amount,\\n                    availableTokens: 0,\\n                    rewardDebt: _amount * rewardPerShare / ACCUMULATED_PRECISION,\\n                    claimCooldown: 0,\\n                    lockedPeriod: _lockedPeriod\\n                })\\n            );\\n\\n            totalStakedTokens += _amount;\\n            userIds[user].push(newId);\\n\\n            emit Staked(user, newId, _token, _amount);\\n        }\\n    }\\n\\n    /// @inheritdoc ITeaStaking\\n    function unstake(UnstakeParam calldata unstakeParams) external {\\n        (bool success, string memory errorReason) = _verifyUnstakeSignature(_msgSender(), unstakeParams);\\n        require(success, errorReason);\\n\\n        _unstake(unstakeParams.ids, unstakeParams.rewardsWithLoyalty);\\n    }\\n\\n    /// @inheritdoc ITeaStaking\\n    function withdraw(uint256[] memory ids) public nonReentrant {\\n        address user = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 _id = ids[i];\\n\\n            if (!checkIdValidity(user, _id)) revert InvalidId(_id);\\n\\n            Stake storage userStake = stakes[_id];\\n            if (userStake.availableTokens == 0) {\\n                revert NeedToUnstakeFirst(_id);\\n            }\\n            if (checkTeaAddrAndNotVip(_id) && userStake.claimCooldown > block.timestamp) {\\n                revert ClaimCooldownNotPassed();\\n            }\\n\\n            address token = userStake.token;\\n            uint256 _availableTokens = userStake.availableTokens;\\n            uint256 _reward = userStake.rewardDebt;\\n\\n            removeFromSystem(user, _id);\\n\\n            if (token == teaToken) {\\n                IERC20(teaToken).safeTransfer(user, _availableTokens);\\n            } else {\\n                _reward += ITeaVesting(teaVesting).getUserUnlockReward(token, user);\\n                ITeaVesting(teaVesting).claim(token, user);\\n                ITeaVesting(teaVesting).transferOwnerOnChain(token, address(this), user);\\n            }\\n            IERC20(teaToken).safeTransfer(user, _reward);\\n\\n            emit Withdrawal(user, token, _availableTokens, _reward);\\n        }\\n    }\\n\\n    // ------------------------------------------ External / Public view functions ----------------\\n\\n    /// @inheritdoc ITeaStaking\\n    function getUserIds(address user) public view returns (uint256[] memory) {\\n        return userIds[user];\\n    }\\n\\n    /// @inheritdoc ITeaStaking\\n    function getTotalUserStakedTokens(address user) public view returns (uint256 totalAmount) {\\n        uint256[] memory allIds = userIds[user];\\n        for (uint256 i = 0; i < allIds.length;) {\\n            totalAmount += stakes[allIds[i]].stakedTokens;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ITeaStaking\\n    function updateRewardPerShare() public {\\n        if (block.number > lastRewardBlockNumber) {\\n            if (totalStakedTokens > 0 && stakingRun) {\\n                uint256 timePassed;\\n                if (block.timestamp < endDate) {\\n                    timePassed = block.timestamp - lastUpdatedTimestamp;\\n                } else {\\n                    timePassed = endDate - lastUpdatedTimestamp;\\n                    stakingRun = false;\\n                }\\n                uint256 tokensAccum = timePassed * allocationPerSecond;\\n                rewardPerShare += tokensAccum * ACCUMULATED_PRECISION / totalStakedTokens;\\n\\n                lastUpdatedTimestamp = block.timestamp;\\n                lastRewardBlockNumber = block.number;\\n\\n                emit UpdatedShareReward(lastUpdatedTimestamp, totalStakedTokens, rewardPerShare);\\n            }\\n        }\\n    }\\n\\n    /// @dev Internal function to check if token address is valid\\n    /// @param token The token of user's stake\\n    function checkTokenValidity(address token) public view returns (bool) {\\n        return validTokens[token] || token == teaToken;\\n    }\\n\\n    // ------------------------------------------ Private view functions --------------------------\\n\\n    /// @dev Internal function to unstake tokens\\n    /// @param ids The IDs of user's stakes to be unstaked\\n    /// @param rewardsWithLoyalty The amount of rewards with loyalty bonus, which is using as a proof to verify the correctness of calculation\\n    function _unstake(uint256[] memory ids, uint256[] calldata rewardsWithLoyalty) private {\\n        if (ids.length != rewardsWithLoyalty.length) revert InvalidArrayLengths();\\n        address user = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 _id = ids[i];\\n            uint256 _proof = rewardsWithLoyalty[i];\\n\\n            if (!checkIdValidity(user, _id)) revert InvalidId(_id);\\n\\n            Stake storage userStake = stakes[_id];\\n            if (userStake.vip && !(block.timestamp > endDate + 30 days)) {\\n                if (block.timestamp < userStake.lockedPeriod) revert LockedPeriodNotPassed(_id);\\n            }\\n            if (userStake.stakedTokens == 0) revert NothingToUnstake(_id);\\n\\n            updateRewardPerShare();\\n            uint256 pendingReward = harvest(_id);\\n\\n            uint256 amount = userStake.stakedTokens;\\n            userStake.stakedTokens = 0;\\n            totalStakedTokens -= amount;\\n            userStake.availableTokens += amount;\\n\\n            uint256 rewardWithThreshold = pendingReward + (pendingReward / 2);\\n\\n            if (_proof > rewardWithThreshold) {\\n                revert InvalidCalculationReward(_proof, rewardWithThreshold);\\n            } else {\\n                userStake.rewardDebt = _proof;\\n            }\\n\\n            userStake.claimCooldown = block.timestamp + 2 weeks;\\n\\n            emit Unstaked(user, _id, amount);\\n        }\\n    }\\n\\n    /// @dev Internal function to harvest user's rewards\\n    /// @param id The ID of user's stake to be harvested\\n    function harvest(uint256 id) private view returns (uint256 reward) {\\n        Stake storage userStake = stakes[id];\\n        uint256 accumulatedReward = userStake.stakedTokens * rewardPerShare / ACCUMULATED_PRECISION;\\n        return accumulatedReward - userStake.rewardDebt;\\n    }\\n\\n    /// @dev Internal function to check if staking period has started\\n    function checkStakingStatus() private view {\\n        if (block.timestamp < startDate) {\\n            revert StakingNotStarted();\\n        } else if (block.timestamp > endDate) {\\n            revert StakingFinished();\\n        }\\n    }\\n\\n    /// @dev Internal function to check if user is VIP and stake has tea token address\\n    /// @param id The ID of user's stake\\n    function checkTeaAddrAndNotVip(uint256 id) private view returns (bool) {\\n        Stake storage userStake = stakes[id];\\n        return userStake.token == teaToken && !userStake.vip;\\n    }\\n\\n    /// @dev Internal function to check if user's ID is valid\\n    /// @param user The address of user\\n    /// @param id The ID of user's stake\\n    function checkIdValidity(address user, uint256 id) private view returns (bool) {\\n        uint256[] memory allIds = userIds[user];\\n        for (uint256 i = 0; i < allIds.length;) {\\n            if (allIds[i] == id) {\\n                return true;\\n            } else {\\n                ++i;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Internal function to remove user's stake from system\\n    /// @param user The address of user\\n    /// @param id The ID of user's stake\\n    function removeFromSystem(address user, uint256 id) private {\\n        delete stakes[id];\\n        removeIdFromList(user, id);\\n    }\\n\\n    /// @dev Internal function to remove ID from list\\n    /// @param user The address of user\\n    /// @param id The ID of user's stake\\n    function removeIdFromList(address user, uint256 id) private {\\n        uint256[] storage allIds = userIds[user];\\n        for (uint256 i = 0; i < allIds.length;) {\\n            if (allIds[i] == id) {\\n                allIds[i] = allIds[allIds.length - 1];\\n                allIds.pop();\\n                break;\\n            } else {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Overrides the function from inherited smart-contracts: `Context`, `ERC2771Context`\\n     * @dev The requirement from the ERC2771Recipient, see [gsn docs](https://docs.opengsn.org/contracts/#receiving-a-relayed-call)\\n     */\\n    function _msgSender() internal view override(Context, ERC2771Context) returns (address sender) {\\n        return super._msgSender();\\n    }\\n\\n    /**\\n     * @notice Overrides the function from inherited smart-contracts: `Context`, `ERC2771Context`\\n     * @dev The requirement from the ERC2771Recipient, see [gsn docs](https://docs.opengsn.org/contracts/#receiving-a-relayed-call)\\n     */\\n    function _msgData() internal view virtual override(Context, ERC2771Context) returns (bytes calldata) {\\n        return super._msgData();\\n    }\\n\\n    /**\\n     * @notice Overrides the function from inherited smart-contracts: `Context`, `ERC2771Context`\\n     * @dev The requirement from the ERC2771Context, see [gsn docs](https://docs.opengsn.org/contracts/#receiving-a-relayed-call)\\n     */\\n    function _contextSuffixLength() internal view virtual override(Context, ERC2771Context) returns (uint256) {\\n        return super._contextSuffixLength();\\n    }\\n}\\n\",\"keccak256\":\"0xcd5cf09aab382c7efbf38a5499f2195eb6963eab8644658b3f8bc64e4942ce09\",\"license\":\"MIT\"},\"contracts/interfaces/IStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\n/**\\n * @title IStruct\\n * @notice Interface for storing transfer ownership and unstake param signature structs\\n */\\ninterface IStruct {\\n    /// @notice Error indicating that the provided address is the zero address\\n    error NoZeroAddress();\\n    /**\\n     * @dev Transfer ownership signature struct\\n     * @param token The address of the presale token\\n     * @param from The address of the previous owner\\n     * @param to The address of the new owner\\n     * @param deadline Timestamp of the deadline\\n     * @param v ECDSA signature V\\n     * @param r ECDSA signature R\\n     * @param s ECDSA signature S\\n     */\\n\\n    struct OffChainStruct {\\n        address token;\\n        address from;\\n        address to;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @dev VestingOption struct\\n     * @param dateEnd - Date in timestamp when vesting is end\\n     * @param dateStart - Date in timestamp when vesting is start\\n     * @param dateDuration - (dateEnd - dateStart)\\n     * @param percentUnlock - precent of force unlock when user vest\\n     */\\n    struct VestingOption {\\n        uint256 dateEnd;\\n        uint256 dateStart;\\n        uint256 dateDuration;\\n        uint256 percentUnlock;\\n    }\\n\\n    /**\\n     * @dev Unstake param signature struct\\n     * @param user The address of the user\\n     * @param operator The address of the operator\\n     * @param ids IDs of the staked tokens\\n     * @param rewardsWithLoyalty The amount of rewards with loyalty\\n     * @param nonce The number of nonce\\n     * @param deadline Timestamp of the deadline\\n     * @param v ECDSA signature V\\n     * @param r ECDSA signature R\\n     * @param s ECDSA signature S\\n     */\\n    struct UnstakeParam {\\n        address user;\\n        address operator;\\n        uint256[] ids;\\n        uint256[] rewardsWithLoyalty;\\n        uint256 nonce;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n}\\n\",\"keccak256\":\"0xead68b3d75f00790c21e302598a9a26c296c2e2ebfd4bd04cfc9dab9af572ece\",\"license\":\"MIT\"},\"contracts/interfaces/ITeaStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\nimport {IStruct} from \\\"./IStruct.sol\\\";\\n\\n/**\\n * @title ITeaStaking\\n * @notice Interface for Tea Staking contract allowing users to stake tokens, earn rewards, and manage staking details\\n * @dev This interface defines the structure and errors used in the Tea Staking system\\n */\\ninterface ITeaStaking is IStruct {\\n    /**\\n     * @notice Structure representing a user's stake\\n     * @param vip Whether the user is marked as a VIP\\n     * @param token The address of the token being staked\\n     * @param stakedTokens The total number of tokens staked by the user\\n     * @param availableTokens The number of tokens available for withdrawal\\n     * @param rewardDebt The amount of rewards that accumulated for the user\\n     * @param claimCooldown The minimum period before the user can claim rewards\\n     * @param lockedPeriod The duration for VIP users in which the staked tokens are locked and cannot be unstaked\\n     */\\n    struct Stake {\\n        bool vip;\\n        address token;\\n        uint256 stakedTokens;\\n        uint256 availableTokens;\\n        uint256 rewardDebt;\\n        uint256 claimCooldown;\\n        uint256 lockedPeriod;\\n    }\\n\\n    /// @notice Error indicating that staking has already been initialized\\n    error StakingAlreadyInitialized();\\n\\n    /// @notice Error indicating that staking has not yet started\\n    error StakingNotStarted();\\n\\n    /// @notice Error indicating that staking has already finished\\n    error StakingFinished();\\n\\n    /// @notice Error indicating that the user has already staked tokens with the specified token\\n    error UserAlreadyStakedWithThisToken();\\n\\n    /// @notice Error indicating that the amount of tokens to stake cannot be zero\\n    error NoZeroAmount();\\n\\n    /// @notice Error indicating that only valid tokens are accepted for staking\\n    error OnlyValidToken();\\n\\n    /// @notice Error indicating that the provided addresses do not match the addresses from off-chain data\\n    error AddressesMismatch();\\n\\n    /**\\n     * @notice Error indicating there is nothing to unstake for the given stake ID\\n     * @param id The ID of the stake that cannot be unstaked\\n     */\\n    error NothingToUnstake(uint256 id);\\n\\n    /// @notice Error indicating that the provided array lengths are invalid\\n    error InvalidArrayLengths();\\n\\n    /// @notice Error indicating that the provided decimal number is invalid\\n    error WrongDecimalNumber();\\n\\n    /**\\n     * @notice Error indicating that the provided stake ID is invalid\\n     * @param id The invalid stake ID\\n     */\\n    error InvalidId(uint256 id);\\n\\n    /**\\n     * @notice Error indicating that the locked period has not passed for the given stake ID\\n     * @param id The ID of the stake with the locked period still active\\n     */\\n    error LockedPeriodNotPassed(uint256 id);\\n\\n    /// @notice Error indicating that the claim cooldown period has not passed\\n    error ClaimCooldownNotPassed();\\n\\n    /**\\n     * @notice Error indicating the user needs to unstake the tokens first before performing another action\\n     * @param id The ID of the stake requiring unstaking\\n     */\\n    error NeedToUnstakeFirst(uint256 id);\\n\\n    /**\\n     * @notice Error indicating a mismatch in reward calculations between proof and contract\\n     * @param proofCalculation The reward calculated via proof\\n     * @param contractCalculation The reward calculated by the contract\\n     */\\n    error InvalidCalculationReward(uint256 proofCalculation, uint256 contractCalculation);\\n\\n    /// @notice Error indicating that the user does not have enough locked tokens to perform an action\\n    error NotEnoughLockedTokens();\\n\\n    /**\\n     * @notice Emitted when the staking contract is initialized\\n     * @param starDate The start date of the staking\\n     * @param endDate The end date of the staking\\n     * @param totalAllocation The total amount of tokens allocated\\n     * @param allocationPerSecond The amount of tokens allocated per second\\n     */\\n    event StakingInitialized(\\n        uint256 indexed starDate, uint256 indexed endDate, uint256 indexed totalAllocation, uint256 allocationPerSecond\\n    );\\n\\n    /**\\n     * @notice Emitted when a user stakes tokens\\n     * @param staker The address of the user staking the tokens\\n     * @param id The ID of the stake\\n     * @param token The address of the token being staked\\n     * @param amount The amount of tokens staked\\n     */\\n    event Staked(address indexed staker, uint256 indexed id, address indexed token, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when a user unstakes tokens\\n     * @param staker The address of the user unstaking tokens\\n     * @param id The ID of the stake being unstaked\\n     * @param amount The amount of tokens unstaked\\n     */\\n    event Unstaked(address indexed staker, uint256 indexed id, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when a user withdraws staked tokens along with rewards\\n     * @param staker The address of the user withdrawing tokens\\n     * @param token The address of the token being withdrawn\\n     * @param stakedTokens The amount of staked tokens being withdrawn\\n     * @param reward The reward earned by the user\\n     */\\n    event Withdrawal(address indexed staker, address indexed token, uint256 stakedTokens, uint256 reward);\\n\\n    /**\\n     * @notice Emitted when the reward per share is updated\\n     * @param timestamp The time at which the reward per share was updated\\n     * @param totalStakedTokens The total number of staked tokens at the time of the update\\n     * @param rewardPerShare The updated reward per share value\\n     */\\n    event UpdatedShareReward(uint256 indexed timestamp, uint256 totalStakedTokens, uint256 rewardPerShare);\\n\\n    /**\\n     * @notice Allows a user to stake multiple tokens with specified amounts\\n     * @dev This function handles the staking process for multiple tokens at once, validating inputs and processing off-chain data\\n     * @param tokens An array of addresses representing the tokens that the user wishes to stake\\n     * @param amounts An array of amounts, corresponding to the number of tokens the user is staking for each token in `tokens`\\n     * @param offChainData An OffChainStruct containing additional off-chain data related to the staking process\\n     */\\n    function stake(address[] calldata tokens, uint256[] calldata amounts, OffChainStruct[] calldata offChainData)\\n        external;\\n\\n    /**\\n     * @notice Allows a user to unstake their staked tokens based on specified parameters\\n     * @dev This function processes the unstaking request and adjusts the user's stake accordingly\\n     * @param unstakeParams A struct containing the parameters for the unstaking process, such as the token, amount, and other necessary details\\n     */\\n    function unstake(UnstakeParam calldata unstakeParams) external;\\n\\n    /**\\n     * @notice Allows a user to withdraw their staked tokens and rewards for multiple stake IDs\\n     * @dev This function handles the withdrawal of tokens and rewards while ensuring non-reentrant security\\n     * @param ids An array of stake IDs representing the specific stakes the user wishes to withdraw\\n     */\\n    function withdraw(uint256[] memory ids) external;\\n\\n    /**\\n     * @notice Returns an array of stake IDs associated with a specific user\\n     * @param user The address of the user whose stake IDs are being queried\\n     * @return An array of uint256 representing the stake IDs that belong to the user\\n     */\\n    function getUserIds(address user) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns the total amount of tokens staked by a specific user\\n     * @dev This function calculates and returns the cumulative total of all tokens staked by the user across different stakes\\n     * @param user The address of the user whose total staked tokens are being queried\\n     * @return totalAmount The total amount of tokens the user has staked\\n     */\\n    function getTotalUserStakedTokens(address user) external view returns (uint256 totalAmount);\\n\\n    /**\\n     * @notice Updates the reward per share for all staked tokens in the contract\\n     * @dev This function recalculates and updates the reward per share value, which affects the rewards distribution for all users\\n     */\\n    function updateRewardPerShare() external;\\n}\\n\",\"keccak256\":\"0xcc18f51c7e23b16f668168fe8887eb9bcc389fcf1c0818698fa85d04a7df1deb\",\"license\":\"MIT\"},\"contracts/interfaces/ITeaVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.23;\\n\\nimport {IStruct} from \\\"./IStruct.sol\\\";\\n\\n/**\\n * @title ITeaVesting\\n * @notice Interface for Tea Vesting contract which manages token vesting for users, allowing them to claim tokens over time\\n * @dev This interface defines the structures and functions related to user token vesting\\n */\\ninterface ITeaVesting is IStruct {\\n    /**\\n     * @notice Structure representing a user's vesting details\\n     * @param tokensForVesting The total number of tokens allocated for vesting\\n     * @param totalVestingClaimed The total number of tokens that the user has already claimed from their vesting allocation\\n     */\\n    struct UserVesting {\\n        uint256 tokensForVesting;\\n        uint256 totalVestingClaimed;\\n    }\\n\\n    /**\\n     * @notice Returns the vesting details of a user for a specific token\\n     * @param user The address of the user whose vesting information is being requested\\n     * @param token The address of the token being vested\\n     * @return A UserVesting struct containing the user's vesting information, including total tokens for vesting and claimed tokens\\n     */\\n    function getVestingUsers(address user, address token) external view returns (UserVesting memory);\\n\\n    /**\\n     * @notice Returns the amount of unlocked rewards that a user can claim for a specific token\\n     * @param token The address of the token for which the reward is being checked\\n     * @param user The address of the user whose unlocked reward is being queried\\n     * @return The amount of unlocked tokens available for the user to claim\\n     */\\n    function getUserUnlockReward(address token, address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Allows a user to claim their vested tokens\\n     * @param token The address of the token being claimed\\n     * @param owner The address of the owner (user) claiming the tokens\\n     * @dev The function handles the actual claiming process, making sure the user can claim their unlocked rewards\\n     */\\n    function claim(address token, address owner) external;\\n\\n    /**\\n     * @notice Transfers ownership of vested tokens on-chain between two addresses\\n     * @param token The address of the token being transferred\\n     * @param from The address of the current owner\\n     * @param owner The address of the new owner to whom the tokens are transferred\\n     * @dev This function handles token ownership transfer on-chain, updating records accordingly\\n     */\\n    function transferOwnerOnChain(address token, address from, address owner) external;\\n\\n    /**\\n     * @notice Transfers ownership of vested tokens off-chain using an OffChainStruct\\n     * @param offChainStruct A structure containing off-chain data necessary for the ownership transfer\\n     * @dev This function facilitates the off-chain transfer of token ownership by relying on off-chain data inputs\\n     */\\n    function transferOwnerOffChain(OffChainStruct memory offChainStruct) external;\\n\\n    /**\\n     * @notice Returns the vesting details of a presale token\\n     * @param token The address of the presale token\\n     * @return A VestingOption struct containing the token's vesting details\\n     */\\n    function getVestingTokens(address token) external view returns (VestingOption memory);\\n}\\n\",\"keccak256\":\"0x24f7c92907c46252cff1233125b4d2b7b906a51a7fc6804568de9b0ca8f08354\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101e06040523480156200001257600080fd5b5060405162003b3a38038062003b3a83398101604081905262000035916200071d565b83856040518060400160405280600a8152602001695465615374616b696e6760b01b815250604051806040016040528060038152602001620312e360ec1b8152506200008c6000836200046c60201b90919060201c565b610120526200009d8160016200046c565b61014052815160208084019190912060e052815190820120610100524660a0526200012b60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052600160035560005b8151811015620001f15760006001600160a01b0316828281518110620001665762000166620007e5565b60200260200101516001600160a01b031603620001965760405163ddbadd5f60e01b815260040160405180910390fd5b620001e77f20296b01d0b6bd176f0c1e29644934c0047abf080dae43609a1bbc09e39bafdb60001b838381518110620001d357620001d3620007e5565b6020026020010151620004a560201b60201c565b506001016200013c565b50506001600160a01b0390811661016052871615806200021857506001600160a01b038616155b806200022b57506001600160a01b038416155b806200023e57506001600160a01b038316155b806200025157506001600160a01b038216155b15620002705760405163ddbadd5f60e01b815260040160405180910390fd5b6200027d600088620004a5565b506001600160a01b03808716610180528381166101a05282166101c08190526040805163313ce56760e01b815290516000929163313ce5679160048083019260209291908290030181865afa158015620002db573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003019190620007fb565b60ff16905060005b82518110156200045d5760006001600160a01b0316838281518110620003335762000333620007e5565b60200260200101516001600160a01b031603620003635760405163ddbadd5f60e01b815260040160405180910390fd5b81838281518110620003795762000379620007e5565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e59190620007fb565b60ff16146200040757604051637dd3fe3360e11b815260040160405180910390fd5b600160116000858481518110620004225762000422620007e5565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010162000309565b50505050505050505062000a79565b60006020835110156200048c57620004848362000559565b90506200049f565b81620004998482620008b8565b5060ff90505b92915050565b60008281526002602090815260408083206001600160a01b038516845290915281205460ff16620005505760008381526002602090815260408083206001600160a01b03861684529091529020805460ff1916600117905562000507620005a5565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200049f565b5060006200049f565b600080829050601f8151111562000590578260405163305a27a960e01b815260040162000587919062000984565b60405180910390fd5b80516200059d82620009d5565b179392505050565b6000620005b1620005b6565b905090565b6000366014620005c63362000612565b8015620005d35750808210155b156200060a57600036620005e88385620009fa565b620005f592829062000a1c565b620006009162000a48565b60601c9250505090565b339250505090565b60006200061f6101605190565b6001600160a01b0316826001600160a01b0316149050919050565b80516001600160a01b03811681146200065257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200067f57600080fd5b815160206001600160401b03808311156200069e576200069e62000657565b8260051b604051601f19603f83011681018181108482111715620006c657620006c662000657565b6040529384526020818701810194908101925087851115620006e757600080fd5b6020870191505b84821015620007125762000702826200063a565b83529183019190830190620006ee565b979650505050505050565b600080600080600080600060e0888a0312156200073957600080fd5b62000744886200063a565b965062000754602089016200063a565b60408901519096506001600160401b03808211156200077257600080fd5b620007808b838c016200066d565b96506200079060608b016200063a565b9550620007a060808b016200063a565b9450620007b060a08b016200063a565b935060c08a0151915080821115620007c757600080fd5b50620007d68a828b016200066d565b91505092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200080e57600080fd5b815160ff811681146200082057600080fd5b9392505050565b600181811c908216806200083c57607f821691505b6020821081036200085d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620008b3576000816000526020600020601f850160051c810160208610156200088e5750805b601f850160051c820191505b81811015620008af578281556001016200089a565b5050505b505050565b81516001600160401b03811115620008d457620008d462000657565b620008ec81620008e5845462000827565b8462000863565b602080601f8311600181146200092457600084156200090b5750858301515b600019600386901b1c1916600185901b178555620008af565b600085815260208120601f198616915b82811015620009555788860151825594840194600190910190840162000934565b5085821015620009745787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352835180602085015260005b81811015620009b45785810183015185820160400152820162000996565b506000604082860101526040601f19601f8301168501019250505092915050565b805160208083015191908110156200085d5760001960209190910360031b1b16919050565b818103818111156200049f57634e487b7160e01b600052601160045260246000fd5b6000808585111562000a2d57600080fd5b8386111562000a3b57600080fd5b5050820193919092039150565b6001600160601b0319813581811691601485101562000a715780818660140360031b1b83161692505b505092915050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c051612fb562000b85600039600081816104b00152818161072c01528181610a4f01528181610a9301528181611021015281816110650152818161124f01528181611350015281816115de0152818161165d01526119ea01526000818161052b01528181610b0101528181610b9801528181610c2e015281816110b80152818161115701526111e30152600081816103e9015261137301526000818161039c015281816104410152611ded01526000611825015260006117f801526000611f2c01526000611f0401526000611e5f01526000611e8901526000611eb30152612fb56000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c80637b49d06811610146578063b04e2f31116100c3578063c8c4fbcf11610087578063c8c4fbcf1461057b578063d547741f14610583578063d5a44f8614610596578063db2e21bc14610626578063f5b541a61461062e578063fbaf894c1461065557600080fd5b8063b04e2f3114610526578063b212f2831461054d578063ba5c42a414610556578063c14ffd8714610569578063c24a0f8b1461057257600080fd5b80638e43ff271161010a5780638e43ff27146104d257806391d14854146104e5578063983d95ce146104f85780639b3fbb181461050b578063a217fddf1461051e57600080fd5b80637b49d0681461042c5780637da0a8771461043f578063841ec13a1461046557806384b0196e146104905780638933b6fd146104ab57600080fd5b8063446a2ec8116101d4578063572b6c0511610198578063572b6c051461038c5780635b684cfb146103cc57806361bc221a146103db57806361d027b3146103e457806379203dc41461042357600080fd5b8063446a2ec81461033357806344958a031461033c5780634980f2881461034f5780634c313fc2146103625780635178a0f01461038257600080fd5b80632f2ff15d1161021b5780632f2ff15d146102ec578063361e940f1461030157806336568abe1461030a5780633ae732591461031d5780633cde9b631461032657600080fd5b806301ffc9a7146102585780630700cc42146102805780630b97bc86146102b557806316d3bfbb146102be578063248a9ca3146102c9575b600080fd5b61026b61026636600461269b565b61065e565b60405190151581526020015b60405180910390f35b6102a77fb89cb22cf091ea736d7376247904b200f2ad707ec01c556961bab09586165a4a81565b604051908152602001610277565b6102a7600c5481565b6102a76301e1338081565b6102a76102d73660046126c5565b60009081526002602052604090206001015490565b6102ff6102fa3660046126fa565b610695565b005b6102a7600a5481565b6102ff6103183660046126fa565b6106c0565b6102a760055481565b600f5461026b9060ff1681565b6102a760095481565b61026b61034a366004612726565b610708565b6102a761035d3660046126c5565b610765565b610375610370366004612726565b610770565b604051610277919061277d565b6102a7620f424081565b61026b61039a366004612726565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6102a7670de0b6b3a764000081565b6102a7600e5481565b61040b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610277565b6102a760075481565b6102a761043a366004612726565b6107dc565b7f000000000000000000000000000000000000000000000000000000000000000061040b565b6102a7610473366004612790565b600460209081526000928352604080842090915290825290205481565b610498610898565b604051610277979695949392919061280a565b61040b7f000000000000000000000000000000000000000000000000000000000000000081565b6102ff6104e03660046128bf565b6108de565b61026b6104f33660046126fa565b610ef5565b6102ff6105063660046129cf565b610f20565b6102ff610519366004612a75565b6112ec565b6102a7600081565b61040b7f000000000000000000000000000000000000000000000000000000000000000081565b6102a760085481565b6102ff610564366004612a97565b6113ff565b6102a760065481565b6102a7600d5481565b6102ff61148c565b6102ff6105913660046126fa565b611588565b6105e76105a43660046126c5565b60106020526000908152604090208054600182015460028301546003840154600485015460059095015460ff8516956101009095046001600160a01b0316949087565b6040805197151588526001600160a01b039096166020880152948601939093526060850191909152608084015260a083015260c082015260e001610277565b6102ff6115ad565b6102a77f20296b01d0b6bd176f0c1e29644934c0047abf080dae43609a1bbc09e39bafdb81565b6102a7600b5481565b60006001600160e01b03198216637965db0b60e01b148061068f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152600260205260409020600101546106b081611684565b6106ba8383611695565b50505050565b6106c861172a565b6001600160a01b0316816001600160a01b0316146106f95760405163334bd91960e11b815260040160405180910390fd5b6107038282611739565b505050565b6001600160a01b03811660009081526011602052604081205460ff168061068f57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161492915050565b600061068f826117c4565b6001600160a01b0381166000908152601260209081526040918290208054835181840281018401909452808452606093928301828280156107d057602002820191906000526020600020905b8154815260200190600101908083116107bc575b50505050509050919050565b6001600160a01b03811660009081526012602090815260408083208054825181850281018501909352808352849383018282801561083957602002820191906000526020600020905b815481526020019060010190808311610825575b5050505050905060005b8151811015610891576010600083838151811061086257610862612ad3565b6020026020010151815260200190815260200160002060010154836108879190612aff565b9250600101610843565b5050919050565b6000606080600080600060606108ac6117f1565b6108b461181e565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6108e661184b565b8483146109065760405163a9854bc960e01b815260040160405180910390fd5b600061091061172a565b905060005b86811015610eeb57600088888381811061093157610931612ad3565b90506020020160208101906109469190612726565b9050600087878481811061095c5761095c612ad3565b905060200201359050806000036109865760405163e858080360e01b815260040160405180910390fd5b61098f82610708565b6109ac576040516316795e0960e21b815260040160405180910390fd5b8585848181106109be576109be612ad3565b6109d492602060e0909202019081019150612726565b6001600160a01b0316826001600160a01b0316141580610a2f5750858584818110610a0157610a01612ad3565b905060e002016040016020810190610a199190612726565b6001600160a01b0316306001600160a01b031614155b15610a4d57604051634d513e1160e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603610ad857610abb6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016853084611891565b8060066000828254610acd9190612aff565b90915550610cc29050565b60405163e3a24fdb60e01b81526001600160a01b038581166004830152838116602483015282917f00000000000000000000000000000000000000000000000000000000000000009091169063e3a24fdb906044016040805180830381865afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d9190612b12565b6020015160405163e3a24fdb60e01b81526001600160a01b03878116600483015285811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063e3a24fdb906044016040805180830381865afa158015610bde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c029190612b12565b51610c0d9190612b61565b1015610c2c57604051630c92f50360e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638b6090d2878786818110610c6d57610c6d612ad3565b905060e002016040518263ffffffff1660e01b8152600401610c8f9190612b83565b600060405180830381600087803b158015610ca957600080fd5b505af1158015610cbd573d6000803e3d6000fd5b505050505b610cca61148c565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2f9190612bff565b610d3a90600a612d00565b610d4790620f4240612d0f565b8310610d625760019150610d5f6301e1338042612aff565b90505b6000600e60008154610d7390612d26565b91905081905590506040518060e001604052808415158152602001866001600160a01b0316815260200185815260200160008152602001670de0b6b3a764000060095487610dc19190612d0f565b610dcb9190612d3f565b81526000602080830182905260409283018690528482526010815282822084518154928601516001600160a81b0319909316901515610100600160a81b031916176101006001600160a01b0390931692909202919091178155918301516001830155606083015160028301556080830151600383015560a0830151600483015560c0909201516005918201558054869290610e67908490612aff565b90915550506001600160a01b0380881660008181526012602090815260408083208054600181018255908452919092200184905551918716918391907ff65271afc35201e83c229b7b581d7fde59bfe7b7dd943e8719fc8c5f5ada63f690610ed29089815260200190565b60405180910390a4505060019093019250610915915050565b5050505050505050565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610f286118f8565b6000610f3261172a565b905060005b82518110156112dd576000838281518110610f5457610f54612ad3565b60200260200101519050610f688382611922565b610f8d5760405163725238c160e11b8152600481018290526024015b60405180910390fd5b60008181526010602052604081206002810154909103610fc3576040516340114e0360e01b815260048101839052602401610f84565b610fcc826119d8565b8015610fdb5750428160040154115b15610ff9576040516337a193d360e21b815260040160405180910390fd5b8054600282015460038301546101009092046001600160a01b03169161101f8786611a31565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316036110915761108c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168884611a77565b611242565b60405163383da8ed60e21b81526001600160a01b03848116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063e0f6a3b490604401602060405180830381865afa1580156110ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111239190612d61565b61112d9082612aff565b6040516310e059a160e11b81526001600160a01b03858116600483015289811660248301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906321c0b34290604401600060405180830381600087803b15801561119d57600080fd5b505af11580156111b1573d6000803e3d6000fd5b5050604051600162281cd760e21b031981526001600160a01b0386811660048301523060248301528a811660448301527f000000000000000000000000000000000000000000000000000000000000000016925063ff5f8ca49150606401600060405180830381600087803b15801561122957600080fd5b505af115801561123d573d6000803e3d6000fd5b505050505b6112766001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168883611a77565b826001600160a01b0316876001600160a01b03167fc2b4a290c20fb28939d29f102514fbffd2b73c059ffba8b78250c94161d5fcc684846040516112c4929190918252602082015260400190565b60405180910390a3505060019093019250610f37915050565b50506112e96001600355565b50565b6112f7600033611aa8565b600f5460ff166113e25760078290556113146301e1338083612d3f565b600855600b819055600c81905561132f6301e1338082612aff565b600d55600f805460ff1916600117905560075461139a906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f0000000000000000000000000000000000000000000000000000000000000000903090611891565b600754600d54600c547f5440330a716398b37add80f8f3b93d3b470de160bd35273c5c5f40a656d1d6c26008546040516113d691815260200190565b60405180910390a45050565b6040516384d364e360e01b815260040160405180910390fd5b5050565b60008061141361140d61172a565b84611ae1565b915091508181906114375760405162461bcd60e51b8152600401610f849190612d7a565b506107036114486040850185612d8d565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611487925050506060860186612d8d565b611baf565b600a544311156115865760006005541180156114aa5750600f5460ff165b15611586576000600d544210156114cf57600b546114c89042612b61565b90506114ec565b600b54600d546114df9190612b61565b600f805460ff1916905590505b6000600854826114fc9190612d0f565b600554909150611514670de0b6b3a764000083612d0f565b61151e9190612d3f565b6009600082825461152f9190612aff565b909155505042600b81905543600a556005546009546040517f943da0a81ca6ad73b5b353da6bfe43af9eab298f2c7c705a365ef5377cde79a49261157b92908252602082015260400190565b60405180910390a250505b565b6000828152600260205260409020600101546115a381611684565b6106ba8383611739565b6115b8600033611aa8565b6006546040516370a0823160e01b81523060048201526115869133916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116499190612d61565b6116539190612b61565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611a77565b6112e98161169061172a565b611aa8565b60006116a18383610ef5565b6117225760008381526002602090815260408083206001600160a01b03861684529091529020805460ff191660011790556116da61172a565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161068f565b50600061068f565b6000611734611ddd565b905090565b60006117458383610ef5565b156117225760008381526002602090815260408083206001600160a01b03861684529091529020805460ff1916905561177c61172a565b6001600160a01b0316826001600160a01b0316847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a450600161068f565b600061068f6117d1611e52565b8360405161190160f01b8152600281019290925260228201526042902090565b60606117347f00000000000000000000000000000000000000000000000000000000000000006000611f7d565b60606117347f00000000000000000000000000000000000000000000000000000000000000006001611f7d565b600c5442101561186e5760405163a0899fdd60e01b815260040160405180910390fd5b600d544211156115865760405163533ede5160e11b815260040160405180910390fd5b6040516001600160a01b0384811660248301528381166044830152606482018390526106ba9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612028565b60026003540361191b57604051633ee5aeb560e01b815260040160405180910390fd5b6002600355565b6001600160a01b03821660009081526012602090815260408083208054825181850281018501909352808352849383018282801561197f57602002820191906000526020600020905b81548152602001906001019080831161196b575b5050505050905060005b81518110156119cd57838282815181106119a5576119a5612ad3565b6020026020010151036119bd5760019250505061068f565b6119c681612d26565b9050611989565b506000949350505050565b600081815260106020526040812080547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811661010090920416148015611a2a5750805460ff16155b9392505050565b600081815260106020526040812080546001600160a81b031916815560018101829055600281018290556003810182905560048101829055600501556113fb828261208b565b6040516001600160a01b0383811660248301526044820183905261070391859182169063a9059cbb906064016118c6565b611ab28282610ef5565b6113fb5760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610f84565b60006060817fb89cb22cf091ea736d7376247904b200f2ad707ec01c556961bab09586165a4a611b146020860186612726565b611b216040870187612d8d565b611b2e6060890189612d8d565b89608001358a60a00135604051602001611b4f989796959493929190612e09565b6040516020818303038152906040529050611ba28186866020016020810190611b789190612726565b608088013560a0890135611b9260e08b0160c08c01612e5f565b8a60e001358b6101000135612157565b92509250505b9250929050565b82518114611bd05760405163a9854bc960e01b815260040160405180910390fd5b6000611bda61172a565b905060005b8451811015611dd6576000858281518110611bfc57611bfc612ad3565b602002602001015190506000858584818110611c1a57611c1a612ad3565b905060200201359050611c2d8483611922565b611c4d5760405163725238c160e11b815260048101839052602401610f84565b6000828152601060205260409020805460ff168015611c7b5750600d54611c779062278d00612aff565b4211155b15611ca8578060050154421015611ca857604051631ae83d9560e01b815260048101849052602401610f84565b8060010154600003611cd0576040516312cfaa6360e11b815260048101849052602401610f84565b611cd861148c565b6000611ce3846122fe565b600183018054600091829055600580549394509092839290611d06908490612b61565b9250508190555080836002016000828254611d219190612aff565b9091555060009050611d34600284612d3f565b611d3e9084612aff565b905080851115611d6b57604051631c0c60c760e31b81526004810186905260248101829052604401610f84565b60038401859055611d7f4262127500612aff565b600485015560405182815286906001600160a01b038a16907f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e9060200160405180910390a3505060019094019350611bdf92505050565b5050505050565b6000366014336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611e1a5750808210155b15611e4a57600036611e2c8385612b61565b611e37928290612e7c565b611e4091612ea6565b60601c9250505090565b339250505090565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611eab57507f000000000000000000000000000000000000000000000000000000000000000046145b15611ed557507f000000000000000000000000000000000000000000000000000000000000000090565b611734604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b606060ff8314611f9757611f908361234e565b905061068f565b818054611fa390612edb565b80601f0160208091040260200160405190810160405280929190818152602001828054611fcf90612edb565b801561201c5780601f10611ff15761010080835404028352916020019161201c565b820191906000526020600020905b815481529060010190602001808311611fff57829003601f168201915b5050505050905061068f565b600061203d6001600160a01b0384168361238d565b905080516000141580156120625750808060200190518101906120609190612f15565b155b1561070357604051635274afe760e01b81526001600160a01b0384166004820152602401610f84565b6001600160a01b0382166000908152601260205260408120905b81548110156106ba57828282815481106120c1576120c1612ad3565b90600052602060002001540361214757815482906120e190600190612b61565b815481106120f1576120f1612ad3565b906000526020600020015482828154811061210e5761210e612ad3565b90600052602060002001819055508180548061212c5761212c612f37565b600190038181906000526020600020016000905590556106ba565b61215081612d26565b90506120a5565b600060606121857f20296b01d0b6bd176f0c1e29644934c0047abf080dae43609a1bbc09e39bafdb89610ef5565b6121ba57505060408051808201909152601081526f24a72b20a624a22fa7a822a920aa27a960811b60208201526000906122f1565b428610156121f457505060408051808201909152601181527014d251d3905515549157d1561412549151607a1b60208201526000906122f1565b6001600160a01b038089166000908152600460209081526040808320938d16835292905290812080549161222783612d26565b9190505587146122645750506040805180820190915260128152714d49534d41544348494e475f4e4f4e43455360701b60208201526000906122f1565b60006122768b805190602001206117c4565b905060006122868288888861239b565b9050896001600160a01b0316816001600160a01b0316146122d857600060405180604001604052806011815260200170494e56414c49445f5349474e415455524560781b8152509350935050506122f1565b6001604051806020016040528060008152509350935050505b9850989650505050505050565b600081815260106020526040812060095460018201548391670de0b6b3a76400009161232a9190612d0f565b6123349190612d3f565b90508160030154816123469190612b61565b949350505050565b6060600061235b836123c9565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6060611a2a838360006123f1565b6000806000806123ad8888888861248e565b9250925092506123bd828261255d565b50909695505050505050565b600060ff8216601f81111561068f57604051632cd44ac360e21b815260040160405180910390fd5b6060814710156124165760405163cd78605960e01b8152306004820152602401610f84565b600080856001600160a01b031684866040516124329190612f4d565b60006040518083038185875af1925050503d806000811461246f576040519150601f19603f3d011682016040523d82523d6000602084013e612474565b606091505b5091509150612484868383612616565b9695505050505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156124c95750600091506003905082612553565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561251d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661254957506000925060019150829050612553565b9250600091508190505b9450945094915050565b600082600381111561257157612571612f69565b0361257a575050565b600182600381111561258e5761258e612f69565b036125ac5760405163f645eedf60e01b815260040160405180910390fd5b60028260038111156125c0576125c0612f69565b036125e15760405163fce698f760e01b815260048101829052602401610f84565b60038260038111156125f5576125f5612f69565b036113fb576040516335e2f38360e21b815260048101829052602401610f84565b60608261262b5761262682612672565b611a2a565b815115801561264257506001600160a01b0384163b155b1561266b57604051639996b31560e01b81526001600160a01b0385166004820152602401610f84565b5080611a2a565b8051156126825780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000602082840312156126ad57600080fd5b81356001600160e01b031981168114611a2a57600080fd5b6000602082840312156126d757600080fd5b5035919050565b80356001600160a01b03811681146126f557600080fd5b919050565b6000806040838503121561270d57600080fd5b8235915061271d602084016126de565b90509250929050565b60006020828403121561273857600080fd5b611a2a826126de565b60008151808452602080850194506020840160005b8381101561277257815187529582019590820190600101612756565b509495945050505050565b602081526000611a2a6020830184612741565b600080604083850312156127a357600080fd5b6127ac836126de565b915061271d602084016126de565b60005b838110156127d55781810151838201526020016127bd565b50506000910152565b600081518084526127f68160208601602086016127ba565b601f01601f19169290920160200192915050565b60ff60f81b8816815260e06020820152600061282960e08301896127de565b828103604084015261283b81896127de565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152905061286c8185612741565b9a9950505050505050505050565b60008083601f84011261288c57600080fd5b50813567ffffffffffffffff8111156128a457600080fd5b6020830191508360208260051b8501011115611ba857600080fd5b600080600080600080606087890312156128d857600080fd5b863567ffffffffffffffff808211156128f057600080fd5b6128fc8a838b0161287a565b9098509650602089013591508082111561291557600080fd5b6129218a838b0161287a565b9096509450604089013591508082111561293a57600080fd5b818901915089601f83011261294e57600080fd5b81358181111561295d57600080fd5b8a602060e08302850101111561297257600080fd5b6020830194508093505050509295509295509295565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156129c7576129c7612988565b604052919050565b600060208083850312156129e257600080fd5b823567ffffffffffffffff808211156129fa57600080fd5b818501915085601f830112612a0e57600080fd5b813581811115612a2057612a20612988565b8060051b9150612a3184830161299e565b8181529183018401918481019088841115612a4b57600080fd5b938501935b83851015612a6957843582529385019390850190612a50565b98975050505050505050565b60008060408385031215612a8857600080fd5b50508035926020909101359150565b600060208284031215612aa957600080fd5b813567ffffffffffffffff811115612ac057600080fd5b82016101208185031215611a2a57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561068f5761068f612ae9565b600060408284031215612b2457600080fd5b6040516040810181811067ffffffffffffffff82111715612b4757612b47612988565b604052825181526020928301519281019290925250919050565b8181038181111561068f5761068f612ae9565b60ff811681146112e957600080fd5b60e081016001600160a01b0380612b99856126de565b16835280612ba9602086016126de565b16602084015280612bbc604086016126de565b16604084015250606083013560608301526080830135612bdb81612b74565b60ff811660808401525060a083013560a083015260c083013560c083015292915050565b600060208284031215612c1157600080fd5b8151611a2a81612b74565b600181815b80851115612c57578160001904821115612c3d57612c3d612ae9565b80851615612c4a57918102915b93841c9390800290612c21565b509250929050565b600082612c6e5750600161068f565b81612c7b5750600061068f565b8160018114612c915760028114612c9b57612cb7565b600191505061068f565b60ff841115612cac57612cac612ae9565b50506001821b61068f565b5060208310610133831016604e8410600b8410161715612cda575081810a61068f565b612ce48383612c1c565b8060001904821115612cf857612cf8612ae9565b029392505050565b6000611a2a60ff841683612c5f565b808202811582820484141761068f5761068f612ae9565b600060018201612d3857612d38612ae9565b5060010190565b600082612d5c57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612d7357600080fd5b5051919050565b602081526000611a2a60208301846127de565b6000808335601e19843603018112612da457600080fd5b83018035915067ffffffffffffffff821115612dbf57600080fd5b6020019150600581901b3603821315611ba857600080fd5b81835260006001600160fb1b03831115612df057600080fd5b8260051b80836020870137939093016020019392505050565b8881526001600160a01b038816602082015260c060408201819052600090612e34908301888a612dd7565b8281036060840152612e47818789612dd7565b6080840195909552505060a001529695505050505050565b600060208284031215612e7157600080fd5b8135611a2a81612b74565b60008085851115612e8c57600080fd5b83861115612e9957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff198135818116916014851015612ed35780818660140360031b1b83161692505b505092915050565b600181811c90821680612eef57607f821691505b602082108103612f0f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612f2757600080fd5b81518015158114611a2a57600080fd5b634e487b7160e01b600052603160045260246000fd5b60008251612f5f8184602087016127ba565b9190910192915050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122018c0278db7e145c3f352c5eb481a9ee0adcfcff342ae1599232022d0b12bb10f64736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c80637b49d06811610146578063b04e2f31116100c3578063c8c4fbcf11610087578063c8c4fbcf1461057b578063d547741f14610583578063d5a44f8614610596578063db2e21bc14610626578063f5b541a61461062e578063fbaf894c1461065557600080fd5b8063b04e2f3114610526578063b212f2831461054d578063ba5c42a414610556578063c14ffd8714610569578063c24a0f8b1461057257600080fd5b80638e43ff271161010a5780638e43ff27146104d257806391d14854146104e5578063983d95ce146104f85780639b3fbb181461050b578063a217fddf1461051e57600080fd5b80637b49d0681461042c5780637da0a8771461043f578063841ec13a1461046557806384b0196e146104905780638933b6fd146104ab57600080fd5b8063446a2ec8116101d4578063572b6c0511610198578063572b6c051461038c5780635b684cfb146103cc57806361bc221a146103db57806361d027b3146103e457806379203dc41461042357600080fd5b8063446a2ec81461033357806344958a031461033c5780634980f2881461034f5780634c313fc2146103625780635178a0f01461038257600080fd5b80632f2ff15d1161021b5780632f2ff15d146102ec578063361e940f1461030157806336568abe1461030a5780633ae732591461031d5780633cde9b631461032657600080fd5b806301ffc9a7146102585780630700cc42146102805780630b97bc86146102b557806316d3bfbb146102be578063248a9ca3146102c9575b600080fd5b61026b61026636600461269b565b61065e565b60405190151581526020015b60405180910390f35b6102a77fb89cb22cf091ea736d7376247904b200f2ad707ec01c556961bab09586165a4a81565b604051908152602001610277565b6102a7600c5481565b6102a76301e1338081565b6102a76102d73660046126c5565b60009081526002602052604090206001015490565b6102ff6102fa3660046126fa565b610695565b005b6102a7600a5481565b6102ff6103183660046126fa565b6106c0565b6102a760055481565b600f5461026b9060ff1681565b6102a760095481565b61026b61034a366004612726565b610708565b6102a761035d3660046126c5565b610765565b610375610370366004612726565b610770565b604051610277919061277d565b6102a7620f424081565b61026b61039a366004612726565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6102a7670de0b6b3a764000081565b6102a7600e5481565b61040b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610277565b6102a760075481565b6102a761043a366004612726565b6107dc565b7f000000000000000000000000000000000000000000000000000000000000000061040b565b6102a7610473366004612790565b600460209081526000928352604080842090915290825290205481565b610498610898565b604051610277979695949392919061280a565b61040b7f000000000000000000000000000000000000000000000000000000000000000081565b6102ff6104e03660046128bf565b6108de565b61026b6104f33660046126fa565b610ef5565b6102ff6105063660046129cf565b610f20565b6102ff610519366004612a75565b6112ec565b6102a7600081565b61040b7f000000000000000000000000000000000000000000000000000000000000000081565b6102a760085481565b6102ff610564366004612a97565b6113ff565b6102a760065481565b6102a7600d5481565b6102ff61148c565b6102ff6105913660046126fa565b611588565b6105e76105a43660046126c5565b60106020526000908152604090208054600182015460028301546003840154600485015460059095015460ff8516956101009095046001600160a01b0316949087565b6040805197151588526001600160a01b039096166020880152948601939093526060850191909152608084015260a083015260c082015260e001610277565b6102ff6115ad565b6102a77f20296b01d0b6bd176f0c1e29644934c0047abf080dae43609a1bbc09e39bafdb81565b6102a7600b5481565b60006001600160e01b03198216637965db0b60e01b148061068f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152600260205260409020600101546106b081611684565b6106ba8383611695565b50505050565b6106c861172a565b6001600160a01b0316816001600160a01b0316146106f95760405163334bd91960e11b815260040160405180910390fd5b6107038282611739565b505050565b6001600160a01b03811660009081526011602052604081205460ff168061068f57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161492915050565b600061068f826117c4565b6001600160a01b0381166000908152601260209081526040918290208054835181840281018401909452808452606093928301828280156107d057602002820191906000526020600020905b8154815260200190600101908083116107bc575b50505050509050919050565b6001600160a01b03811660009081526012602090815260408083208054825181850281018501909352808352849383018282801561083957602002820191906000526020600020905b815481526020019060010190808311610825575b5050505050905060005b8151811015610891576010600083838151811061086257610862612ad3565b6020026020010151815260200190815260200160002060010154836108879190612aff565b9250600101610843565b5050919050565b6000606080600080600060606108ac6117f1565b6108b461181e565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6108e661184b565b8483146109065760405163a9854bc960e01b815260040160405180910390fd5b600061091061172a565b905060005b86811015610eeb57600088888381811061093157610931612ad3565b90506020020160208101906109469190612726565b9050600087878481811061095c5761095c612ad3565b905060200201359050806000036109865760405163e858080360e01b815260040160405180910390fd5b61098f82610708565b6109ac576040516316795e0960e21b815260040160405180910390fd5b8585848181106109be576109be612ad3565b6109d492602060e0909202019081019150612726565b6001600160a01b0316826001600160a01b0316141580610a2f5750858584818110610a0157610a01612ad3565b905060e002016040016020810190610a199190612726565b6001600160a01b0316306001600160a01b031614155b15610a4d57604051634d513e1160e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603610ad857610abb6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016853084611891565b8060066000828254610acd9190612aff565b90915550610cc29050565b60405163e3a24fdb60e01b81526001600160a01b038581166004830152838116602483015282917f00000000000000000000000000000000000000000000000000000000000000009091169063e3a24fdb906044016040805180830381865afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d9190612b12565b6020015160405163e3a24fdb60e01b81526001600160a01b03878116600483015285811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063e3a24fdb906044016040805180830381865afa158015610bde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c029190612b12565b51610c0d9190612b61565b1015610c2c57604051630c92f50360e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638b6090d2878786818110610c6d57610c6d612ad3565b905060e002016040518263ffffffff1660e01b8152600401610c8f9190612b83565b600060405180830381600087803b158015610ca957600080fd5b505af1158015610cbd573d6000803e3d6000fd5b505050505b610cca61148c565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2f9190612bff565b610d3a90600a612d00565b610d4790620f4240612d0f565b8310610d625760019150610d5f6301e1338042612aff565b90505b6000600e60008154610d7390612d26565b91905081905590506040518060e001604052808415158152602001866001600160a01b0316815260200185815260200160008152602001670de0b6b3a764000060095487610dc19190612d0f565b610dcb9190612d3f565b81526000602080830182905260409283018690528482526010815282822084518154928601516001600160a81b0319909316901515610100600160a81b031916176101006001600160a01b0390931692909202919091178155918301516001830155606083015160028301556080830151600383015560a0830151600483015560c0909201516005918201558054869290610e67908490612aff565b90915550506001600160a01b0380881660008181526012602090815260408083208054600181018255908452919092200184905551918716918391907ff65271afc35201e83c229b7b581d7fde59bfe7b7dd943e8719fc8c5f5ada63f690610ed29089815260200190565b60405180910390a4505060019093019250610915915050565b5050505050505050565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610f286118f8565b6000610f3261172a565b905060005b82518110156112dd576000838281518110610f5457610f54612ad3565b60200260200101519050610f688382611922565b610f8d5760405163725238c160e11b8152600481018290526024015b60405180910390fd5b60008181526010602052604081206002810154909103610fc3576040516340114e0360e01b815260048101839052602401610f84565b610fcc826119d8565b8015610fdb5750428160040154115b15610ff9576040516337a193d360e21b815260040160405180910390fd5b8054600282015460038301546101009092046001600160a01b03169161101f8786611a31565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316036110915761108c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168884611a77565b611242565b60405163383da8ed60e21b81526001600160a01b03848116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063e0f6a3b490604401602060405180830381865afa1580156110ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111239190612d61565b61112d9082612aff565b6040516310e059a160e11b81526001600160a01b03858116600483015289811660248301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906321c0b34290604401600060405180830381600087803b15801561119d57600080fd5b505af11580156111b1573d6000803e3d6000fd5b5050604051600162281cd760e21b031981526001600160a01b0386811660048301523060248301528a811660448301527f000000000000000000000000000000000000000000000000000000000000000016925063ff5f8ca49150606401600060405180830381600087803b15801561122957600080fd5b505af115801561123d573d6000803e3d6000fd5b505050505b6112766001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168883611a77565b826001600160a01b0316876001600160a01b03167fc2b4a290c20fb28939d29f102514fbffd2b73c059ffba8b78250c94161d5fcc684846040516112c4929190918252602082015260400190565b60405180910390a3505060019093019250610f37915050565b50506112e96001600355565b50565b6112f7600033611aa8565b600f5460ff166113e25760078290556113146301e1338083612d3f565b600855600b819055600c81905561132f6301e1338082612aff565b600d55600f805460ff1916600117905560075461139a906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f0000000000000000000000000000000000000000000000000000000000000000903090611891565b600754600d54600c547f5440330a716398b37add80f8f3b93d3b470de160bd35273c5c5f40a656d1d6c26008546040516113d691815260200190565b60405180910390a45050565b6040516384d364e360e01b815260040160405180910390fd5b5050565b60008061141361140d61172a565b84611ae1565b915091508181906114375760405162461bcd60e51b8152600401610f849190612d7a565b506107036114486040850185612d8d565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611487925050506060860186612d8d565b611baf565b600a544311156115865760006005541180156114aa5750600f5460ff165b15611586576000600d544210156114cf57600b546114c89042612b61565b90506114ec565b600b54600d546114df9190612b61565b600f805460ff1916905590505b6000600854826114fc9190612d0f565b600554909150611514670de0b6b3a764000083612d0f565b61151e9190612d3f565b6009600082825461152f9190612aff565b909155505042600b81905543600a556005546009546040517f943da0a81ca6ad73b5b353da6bfe43af9eab298f2c7c705a365ef5377cde79a49261157b92908252602082015260400190565b60405180910390a250505b565b6000828152600260205260409020600101546115a381611684565b6106ba8383611739565b6115b8600033611aa8565b6006546040516370a0823160e01b81523060048201526115869133916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116499190612d61565b6116539190612b61565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611a77565b6112e98161169061172a565b611aa8565b60006116a18383610ef5565b6117225760008381526002602090815260408083206001600160a01b03861684529091529020805460ff191660011790556116da61172a565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161068f565b50600061068f565b6000611734611ddd565b905090565b60006117458383610ef5565b156117225760008381526002602090815260408083206001600160a01b03861684529091529020805460ff1916905561177c61172a565b6001600160a01b0316826001600160a01b0316847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a450600161068f565b600061068f6117d1611e52565b8360405161190160f01b8152600281019290925260228201526042902090565b60606117347f00000000000000000000000000000000000000000000000000000000000000006000611f7d565b60606117347f00000000000000000000000000000000000000000000000000000000000000006001611f7d565b600c5442101561186e5760405163a0899fdd60e01b815260040160405180910390fd5b600d544211156115865760405163533ede5160e11b815260040160405180910390fd5b6040516001600160a01b0384811660248301528381166044830152606482018390526106ba9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612028565b60026003540361191b57604051633ee5aeb560e01b815260040160405180910390fd5b6002600355565b6001600160a01b03821660009081526012602090815260408083208054825181850281018501909352808352849383018282801561197f57602002820191906000526020600020905b81548152602001906001019080831161196b575b5050505050905060005b81518110156119cd57838282815181106119a5576119a5612ad3565b6020026020010151036119bd5760019250505061068f565b6119c681612d26565b9050611989565b506000949350505050565b600081815260106020526040812080547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811661010090920416148015611a2a5750805460ff16155b9392505050565b600081815260106020526040812080546001600160a81b031916815560018101829055600281018290556003810182905560048101829055600501556113fb828261208b565b6040516001600160a01b0383811660248301526044820183905261070391859182169063a9059cbb906064016118c6565b611ab28282610ef5565b6113fb5760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610f84565b60006060817fb89cb22cf091ea736d7376247904b200f2ad707ec01c556961bab09586165a4a611b146020860186612726565b611b216040870187612d8d565b611b2e6060890189612d8d565b89608001358a60a00135604051602001611b4f989796959493929190612e09565b6040516020818303038152906040529050611ba28186866020016020810190611b789190612726565b608088013560a0890135611b9260e08b0160c08c01612e5f565b8a60e001358b6101000135612157565b92509250505b9250929050565b82518114611bd05760405163a9854bc960e01b815260040160405180910390fd5b6000611bda61172a565b905060005b8451811015611dd6576000858281518110611bfc57611bfc612ad3565b602002602001015190506000858584818110611c1a57611c1a612ad3565b905060200201359050611c2d8483611922565b611c4d5760405163725238c160e11b815260048101839052602401610f84565b6000828152601060205260409020805460ff168015611c7b5750600d54611c779062278d00612aff565b4211155b15611ca8578060050154421015611ca857604051631ae83d9560e01b815260048101849052602401610f84565b8060010154600003611cd0576040516312cfaa6360e11b815260048101849052602401610f84565b611cd861148c565b6000611ce3846122fe565b600183018054600091829055600580549394509092839290611d06908490612b61565b9250508190555080836002016000828254611d219190612aff565b9091555060009050611d34600284612d3f565b611d3e9084612aff565b905080851115611d6b57604051631c0c60c760e31b81526004810186905260248101829052604401610f84565b60038401859055611d7f4262127500612aff565b600485015560405182815286906001600160a01b038a16907f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e9060200160405180910390a3505060019094019350611bdf92505050565b5050505050565b6000366014336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611e1a5750808210155b15611e4a57600036611e2c8385612b61565b611e37928290612e7c565b611e4091612ea6565b60601c9250505090565b339250505090565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611eab57507f000000000000000000000000000000000000000000000000000000000000000046145b15611ed557507f000000000000000000000000000000000000000000000000000000000000000090565b611734604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b606060ff8314611f9757611f908361234e565b905061068f565b818054611fa390612edb565b80601f0160208091040260200160405190810160405280929190818152602001828054611fcf90612edb565b801561201c5780601f10611ff15761010080835404028352916020019161201c565b820191906000526020600020905b815481529060010190602001808311611fff57829003601f168201915b5050505050905061068f565b600061203d6001600160a01b0384168361238d565b905080516000141580156120625750808060200190518101906120609190612f15565b155b1561070357604051635274afe760e01b81526001600160a01b0384166004820152602401610f84565b6001600160a01b0382166000908152601260205260408120905b81548110156106ba57828282815481106120c1576120c1612ad3565b90600052602060002001540361214757815482906120e190600190612b61565b815481106120f1576120f1612ad3565b906000526020600020015482828154811061210e5761210e612ad3565b90600052602060002001819055508180548061212c5761212c612f37565b600190038181906000526020600020016000905590556106ba565b61215081612d26565b90506120a5565b600060606121857f20296b01d0b6bd176f0c1e29644934c0047abf080dae43609a1bbc09e39bafdb89610ef5565b6121ba57505060408051808201909152601081526f24a72b20a624a22fa7a822a920aa27a960811b60208201526000906122f1565b428610156121f457505060408051808201909152601181527014d251d3905515549157d1561412549151607a1b60208201526000906122f1565b6001600160a01b038089166000908152600460209081526040808320938d16835292905290812080549161222783612d26565b9190505587146122645750506040805180820190915260128152714d49534d41544348494e475f4e4f4e43455360701b60208201526000906122f1565b60006122768b805190602001206117c4565b905060006122868288888861239b565b9050896001600160a01b0316816001600160a01b0316146122d857600060405180604001604052806011815260200170494e56414c49445f5349474e415455524560781b8152509350935050506122f1565b6001604051806020016040528060008152509350935050505b9850989650505050505050565b600081815260106020526040812060095460018201548391670de0b6b3a76400009161232a9190612d0f565b6123349190612d3f565b90508160030154816123469190612b61565b949350505050565b6060600061235b836123c9565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6060611a2a838360006123f1565b6000806000806123ad8888888861248e565b9250925092506123bd828261255d565b50909695505050505050565b600060ff8216601f81111561068f57604051632cd44ac360e21b815260040160405180910390fd5b6060814710156124165760405163cd78605960e01b8152306004820152602401610f84565b600080856001600160a01b031684866040516124329190612f4d565b60006040518083038185875af1925050503d806000811461246f576040519150601f19603f3d011682016040523d82523d6000602084013e612474565b606091505b5091509150612484868383612616565b9695505050505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156124c95750600091506003905082612553565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561251d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661254957506000925060019150829050612553565b9250600091508190505b9450945094915050565b600082600381111561257157612571612f69565b0361257a575050565b600182600381111561258e5761258e612f69565b036125ac5760405163f645eedf60e01b815260040160405180910390fd5b60028260038111156125c0576125c0612f69565b036125e15760405163fce698f760e01b815260048101829052602401610f84565b60038260038111156125f5576125f5612f69565b036113fb576040516335e2f38360e21b815260048101829052602401610f84565b60608261262b5761262682612672565b611a2a565b815115801561264257506001600160a01b0384163b155b1561266b57604051639996b31560e01b81526001600160a01b0385166004820152602401610f84565b5080611a2a565b8051156126825780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000602082840312156126ad57600080fd5b81356001600160e01b031981168114611a2a57600080fd5b6000602082840312156126d757600080fd5b5035919050565b80356001600160a01b03811681146126f557600080fd5b919050565b6000806040838503121561270d57600080fd5b8235915061271d602084016126de565b90509250929050565b60006020828403121561273857600080fd5b611a2a826126de565b60008151808452602080850194506020840160005b8381101561277257815187529582019590820190600101612756565b509495945050505050565b602081526000611a2a6020830184612741565b600080604083850312156127a357600080fd5b6127ac836126de565b915061271d602084016126de565b60005b838110156127d55781810151838201526020016127bd565b50506000910152565b600081518084526127f68160208601602086016127ba565b601f01601f19169290920160200192915050565b60ff60f81b8816815260e06020820152600061282960e08301896127de565b828103604084015261283b81896127de565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152905061286c8185612741565b9a9950505050505050505050565b60008083601f84011261288c57600080fd5b50813567ffffffffffffffff8111156128a457600080fd5b6020830191508360208260051b8501011115611ba857600080fd5b600080600080600080606087890312156128d857600080fd5b863567ffffffffffffffff808211156128f057600080fd5b6128fc8a838b0161287a565b9098509650602089013591508082111561291557600080fd5b6129218a838b0161287a565b9096509450604089013591508082111561293a57600080fd5b818901915089601f83011261294e57600080fd5b81358181111561295d57600080fd5b8a602060e08302850101111561297257600080fd5b6020830194508093505050509295509295509295565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156129c7576129c7612988565b604052919050565b600060208083850312156129e257600080fd5b823567ffffffffffffffff808211156129fa57600080fd5b818501915085601f830112612a0e57600080fd5b813581811115612a2057612a20612988565b8060051b9150612a3184830161299e565b8181529183018401918481019088841115612a4b57600080fd5b938501935b83851015612a6957843582529385019390850190612a50565b98975050505050505050565b60008060408385031215612a8857600080fd5b50508035926020909101359150565b600060208284031215612aa957600080fd5b813567ffffffffffffffff811115612ac057600080fd5b82016101208185031215611a2a57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561068f5761068f612ae9565b600060408284031215612b2457600080fd5b6040516040810181811067ffffffffffffffff82111715612b4757612b47612988565b604052825181526020928301519281019290925250919050565b8181038181111561068f5761068f612ae9565b60ff811681146112e957600080fd5b60e081016001600160a01b0380612b99856126de565b16835280612ba9602086016126de565b16602084015280612bbc604086016126de565b16604084015250606083013560608301526080830135612bdb81612b74565b60ff811660808401525060a083013560a083015260c083013560c083015292915050565b600060208284031215612c1157600080fd5b8151611a2a81612b74565b600181815b80851115612c57578160001904821115612c3d57612c3d612ae9565b80851615612c4a57918102915b93841c9390800290612c21565b509250929050565b600082612c6e5750600161068f565b81612c7b5750600061068f565b8160018114612c915760028114612c9b57612cb7565b600191505061068f565b60ff841115612cac57612cac612ae9565b50506001821b61068f565b5060208310610133831016604e8410600b8410161715612cda575081810a61068f565b612ce48383612c1c565b8060001904821115612cf857612cf8612ae9565b029392505050565b6000611a2a60ff841683612c5f565b808202811582820484141761068f5761068f612ae9565b600060018201612d3857612d38612ae9565b5060010190565b600082612d5c57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612d7357600080fd5b5051919050565b602081526000611a2a60208301846127de565b6000808335601e19843603018112612da457600080fd5b83018035915067ffffffffffffffff821115612dbf57600080fd5b6020019150600581901b3603821315611ba857600080fd5b81835260006001600160fb1b03831115612df057600080fd5b8260051b80836020870137939093016020019392505050565b8881526001600160a01b038816602082015260c060408201819052600090612e34908301888a612dd7565b8281036060840152612e47818789612dd7565b6080840195909552505060a001529695505050505050565b600060208284031215612e7157600080fd5b8135611a2a81612b74565b60008085851115612e8c57600080fd5b83861115612e9957600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff198135818116916014851015612ed35780818660140360031b1b83161692505b505092915050565b600181811c90821680612eef57607f821691505b602082108103612f0f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612f2757600080fd5b81518015158114611a2a57600080fd5b634e487b7160e01b600052603160045260246000fd5b60008251612f5f8184602087016127ba565b9190910192915050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122018c0278db7e145c3f352c5eb481a9ee0adcfcff342ae1599232022d0b12bb10f64736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidCalculationReward(uint256,uint256)": [
        {
          "params": {
            "contractCalculation": "The reward calculated by the contract",
            "proofCalculation": "The reward calculated via proof"
          }
        }
      ],
      "InvalidId(uint256)": [
        {
          "params": {
            "id": "The invalid stake ID"
          }
        }
      ],
      "LockedPeriodNotPassed(uint256)": [
        {
          "params": {
            "id": "The ID of the stake with the locked period still active"
          }
        }
      ],
      "NeedToUnstakeFirst(uint256)": [
        {
          "params": {
            "id": "The ID of the stake requiring unstaking"
          }
        }
      ],
      "NothingToUnstake(uint256)": [
        {
          "params": {
            "id": "The ID of the stake that cannot be unstaked"
          }
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Staked(address,uint256,address,uint256)": {
        "params": {
          "amount": "The amount of tokens staked",
          "id": "The ID of the stake",
          "staker": "The address of the user staking the tokens",
          "token": "The address of the token being staked"
        }
      },
      "StakingInitialized(uint256,uint256,uint256,uint256)": {
        "params": {
          "allocationPerSecond": "The amount of tokens allocated per second",
          "endDate": "The end date of the staking",
          "starDate": "The start date of the staking",
          "totalAllocation": "The total amount of tokens allocated"
        }
      },
      "Unstaked(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of tokens unstaked",
          "id": "The ID of the stake being unstaked",
          "staker": "The address of the user unstaking tokens"
        }
      },
      "UpdatedShareReward(uint256,uint256,uint256)": {
        "params": {
          "rewardPerShare": "The updated reward per share value",
          "timestamp": "The time at which the reward per share was updated",
          "totalStakedTokens": "The total number of staked tokens at the time of the update"
        }
      },
      "Withdrawal(address,address,uint256,uint256)": {
        "params": {
          "reward": "The reward earned by the user",
          "stakedTokens": "The amount of staked tokens being withdrawn",
          "staker": "The address of the user withdrawing tokens",
          "token": "The address of the token being withdrawn"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "checkTokenValidity(address)": {
        "details": "Internal function to check if token address is valid",
        "params": {
          "token": "The token of user's stake"
        }
      },
      "constructor": {
        "params": {
          "_teaToken": "The address of the token",
          "_teaVesting": "The address of the vesting contract",
          "_treasury": "The address of the treasury",
          "admin": "The address of the admin",
          "operators": "The list of operators",
          "presaleTokens": "The list of presale tokens",
          "trustedForwarder": "The address of the trusted forwarder"
        }
      },
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTotalUserStakedTokens(address)": {
        "details": "This function calculates and returns the cumulative total of all tokens staked by the user across different stakes",
        "params": {
          "user": "The address of the user whose total staked tokens are being queried"
        },
        "returns": {
          "totalAmount": "The total amount of tokens the user has staked"
        }
      },
      "getUserIds(address)": {
        "params": {
          "user": "The address of the user whose stake IDs are being queried"
        },
        "returns": {
          "_0": "An array of uint256 representing the stake IDs that belong to the user"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initializeStaking(uint256,uint256)": {
        "params": {
          "newRewardDistributionStartTime": "The start time of the reward distribution",
          "newTotalAllocation": "The total amount of allocation to be distributed"
        }
      },
      "isTrustedForwarder(address)": {
        "details": "Indicates whether any particular address is the trusted forwarder."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "stake(address[],uint256[],(address,address,address,uint256,uint8,bytes32,bytes32)[])": {
        "details": "This function handles the staking process for multiple tokens at once, validating inputs and processing off-chain data",
        "params": {
          "amounts": "An array of amounts, corresponding to the number of tokens the user is staking for each token in `tokens`",
          "offChainData": "An OffChainStruct containing additional off-chain data related to the staking process",
          "tokens": "An array of addresses representing the tokens that the user wishes to stake"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "trustedForwarder()": {
        "details": "Returns the address of the trusted forwarder."
      },
      "unstake((address,address,uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32))": {
        "details": "This function processes the unstaking request and adjusts the user's stake accordingly",
        "params": {
          "unstakeParams": "A struct containing the parameters for the unstaking process, such as the token, amount, and other necessary details"
        }
      },
      "updateRewardPerShare()": {
        "details": "This function recalculates and updates the reward per share value, which affects the rewards distribution for all users"
      },
      "withdraw(uint256[])": {
        "details": "This function handles the withdrawal of tokens and rewards while ensuring non-reentrant security",
        "params": {
          "ids": "An array of stake IDs representing the specific stakes the user wishes to withdraw"
        }
      }
    },
    "title": "TeaStaking",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AddressesMismatch()": [
        {
          "notice": "Error indicating that the provided addresses do not match the addresses from off-chain data"
        }
      ],
      "ClaimCooldownNotPassed()": [
        {
          "notice": "Error indicating that the claim cooldown period has not passed"
        }
      ],
      "InvalidArrayLengths()": [
        {
          "notice": "Error indicating that the provided array lengths are invalid"
        }
      ],
      "InvalidCalculationReward(uint256,uint256)": [
        {
          "notice": "Error indicating a mismatch in reward calculations between proof and contract"
        }
      ],
      "InvalidId(uint256)": [
        {
          "notice": "Error indicating that the provided stake ID is invalid"
        }
      ],
      "LockedPeriodNotPassed(uint256)": [
        {
          "notice": "Error indicating that the locked period has not passed for the given stake ID"
        }
      ],
      "NeedToUnstakeFirst(uint256)": [
        {
          "notice": "Error indicating the user needs to unstake the tokens first before performing another action"
        }
      ],
      "NoZeroAddress()": [
        {
          "notice": "Error indicating that the provided address is the zero address"
        }
      ],
      "NoZeroAmount()": [
        {
          "notice": "Error indicating that the amount of tokens to stake cannot be zero"
        }
      ],
      "NotEnoughLockedTokens()": [
        {
          "notice": "Error indicating that the user does not have enough locked tokens to perform an action"
        }
      ],
      "NothingToUnstake(uint256)": [
        {
          "notice": "Error indicating there is nothing to unstake for the given stake ID"
        }
      ],
      "OnlyValidToken()": [
        {
          "notice": "Error indicating that only valid tokens are accepted for staking"
        }
      ],
      "StakingAlreadyInitialized()": [
        {
          "notice": "Error indicating that staking has already been initialized"
        }
      ],
      "StakingFinished()": [
        {
          "notice": "Error indicating that staking has already finished"
        }
      ],
      "StakingNotStarted()": [
        {
          "notice": "Error indicating that staking has not yet started"
        }
      ],
      "UserAlreadyStakedWithThisToken()": [
        {
          "notice": "Error indicating that the user has already staked tokens with the specified token"
        }
      ],
      "WrongDecimalNumber()": [
        {
          "notice": "Error indicating that the provided decimal number is invalid"
        }
      ]
    },
    "events": {
      "Staked(address,uint256,address,uint256)": {
        "notice": "Emitted when a user stakes tokens"
      },
      "StakingInitialized(uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when the staking contract is initialized"
      },
      "Unstaked(address,uint256,uint256)": {
        "notice": "Emitted when a user unstakes tokens"
      },
      "UpdatedShareReward(uint256,uint256,uint256)": {
        "notice": "Emitted when the reward per share is updated"
      },
      "Withdrawal(address,address,uint256,uint256)": {
        "notice": "Emitted when a user withdraws staked tokens along with rewards"
      }
    },
    "kind": "user",
    "methods": {
      "ACCUMULATED_PRECISION()": {
        "notice": "The precision of the accumulated rewards"
      },
      "ONE_YEAR()": {
        "notice": "1 year in days"
      },
      "VIP_AMOUNT()": {
        "notice": "The amount of VIP tokens, 1 million"
      },
      "allocationPerSecond()": {
        "notice": "The amount of allocation per second"
      },
      "constructor": {
        "notice": "Constructor of the contract"
      },
      "counter()": {
        "notice": "The counter for stake IDs"
      },
      "emergencyWithdraw()": {
        "notice": "Allows the admin to withdraw all allocation from contract"
      },
      "endDate()": {
        "notice": "The end date of the staking"
      },
      "getTotalUserStakedTokens(address)": {
        "notice": "Returns the total amount of tokens staked by a specific user"
      },
      "getUserIds(address)": {
        "notice": "Returns an array of stake IDs associated with a specific user"
      },
      "initializeStaking(uint256,uint256)": {
        "notice": "Allows the admin to initialize the staking"
      },
      "lastRewardBlockNumber()": {
        "notice": "The block number of the last reward"
      },
      "lastUpdatedTimestamp()": {
        "notice": "The timestamp of the last reward"
      },
      "rewardPerShare()": {
        "notice": "The amount of rewards per share"
      },
      "stake(address[],uint256[],(address,address,address,uint256,uint8,bytes32,bytes32)[])": {
        "notice": "Allows a user to stake multiple tokens with specified amounts"
      },
      "stakes(uint256)": {
        "notice": "The mapping of each stake"
      },
      "stakingRun()": {
        "notice": "The state of the staking"
      },
      "startDate()": {
        "notice": "The start date of the staking"
      },
      "teaToken()": {
        "notice": "The address of the Tea token"
      },
      "teaVesting()": {
        "notice": "The address of the Tea vesting contract"
      },
      "totalAllocation()": {
        "notice": "The amount of total allocation"
      },
      "totalStakedTea()": {
        "notice": "The amount of total staked Tea"
      },
      "totalStakedTokens()": {
        "notice": "The amount of total staked tokens"
      },
      "treasury()": {
        "notice": "The address of the treasury"
      },
      "unstake((address,address,uint256[],uint256[],uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Allows a user to unstake their staked tokens based on specified parameters"
      },
      "updateRewardPerShare()": {
        "notice": "Updates the reward per share for all staked tokens in the contract"
      },
      "withdraw(uint256[])": {
        "notice": "Allows a user to withdraw their staked tokens and rewards for multiple stake IDs"
      }
    },
    "notice": "The contract which allowing users to stake Tea and presale tokens, earn allocationrewards, and manage theirs stakes",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2295,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2297,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 26,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "_roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 1270,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3777,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "operatorUserNonces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4025,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "totalStakedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4028,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "totalStakedTea",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4031,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "totalAllocation",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4034,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "allocationPerSecond",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4037,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "rewardPerShare",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4040,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "lastRewardBlockNumber",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4043,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "lastUpdatedTimestamp",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4046,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "startDate",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4049,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "endDate",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4052,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "counter",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4064,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "stakingRun",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 4070,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "stakes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(Stake)5364_storage)"
      },
      {
        "astId": 4075,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "validTokens",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4081,
        "contract": "contracts/TeaStaking.sol:TeaStaking",
        "label": "userIds",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_uint256,t_struct(Stake)5364_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITeaStaking.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)5364_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/TeaStaking.sol:TeaStaking",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/TeaStaking.sol:TeaStaking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stake)5364_storage": {
        "encoding": "inplace",
        "label": "struct ITeaStaking.Stake",
        "members": [
          {
            "astId": 5351,
            "contract": "contracts/TeaStaking.sol:TeaStaking",
            "label": "vip",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5353,
            "contract": "contracts/TeaStaking.sol:TeaStaking",
            "label": "token",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5355,
            "contract": "contracts/TeaStaking.sol:TeaStaking",
            "label": "stakedTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5357,
            "contract": "contracts/TeaStaking.sol:TeaStaking",
            "label": "availableTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5359,
            "contract": "contracts/TeaStaking.sol:TeaStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5361,
            "contract": "contracts/TeaStaking.sol:TeaStaking",
            "label": "claimCooldown",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5363,
            "contract": "contracts/TeaStaking.sol:TeaStaking",
            "label": "lockedPeriod",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}